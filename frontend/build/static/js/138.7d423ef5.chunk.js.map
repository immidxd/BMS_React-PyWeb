{"version":3,"file":"static/js/138.7d423ef5.chunk.js","mappings":"qLAIA,MAAMA,EAAsCA,KAExCC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,8DAA6DF,SAAC,mEAC5EC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uHAAsHF,SAAC,wBAEtIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,8DAA6DF,SAAC,0CAC5EC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uHAAsHF,SAAC,0BAEtIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,8DAA6DF,SAAC,sIAC5EC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uHAAsHF,SAAC,8BAEtIC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uDAAsDF,SAAC,8BAsD1E,EA7CgDG,IAA4B,IAA3B,kBAAEC,GAAmBD,EACpE,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAEjDC,EAAAA,EAAAA,YAAU,UACkBC,IAAtBL,GACAM,QAAQC,IAAI,oCAAqCP,EAErD,GACC,CAACA,IAeJ,OACEH,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CACTC,oBAAoBZ,EAAAA,EAAAA,KAACH,EAAyB,IAC9CgB,UAhBkBC,KACpBL,QAAQC,IAAI,yBACZL,GAAgB,GAChBU,YAAW,KACTV,GAAgB,GAChBI,QAAQC,IAAI,qBAAqB,GAChC,KAAK,EAWNN,aAAcA,EACdY,eATuBC,KACzBR,QAAQC,IAAI,8BAA8B,EAQLX,UAEnCD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qDAAoDF,SAAA,EACjED,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCF,SAAA,EACnDC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0DAAyDF,SAAC,+CACvEI,IAAqBL,EAAAA,EAAAA,MAAA,KAAGG,UAAU,2CAA0CF,SAAA,CAAC,qFAAkBI,EAAkB,WAGtHH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oIAAmIF,UAChJC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCF,SAAC,kJAIzC,C,yDC1DjB,MAiCA,EAjCoDG,IAI7C,IAJ8C,QACnDgB,EAAO,UACPC,GAAY,EAAK,MACjBC,EAAQ,uEACTlB,EACC,OACEF,EAAAA,EAAAA,KAAA,UACEkB,QAASA,EACTG,SAAUF,EACV,aAAYC,EACZnB,UAAW,6cAK2CF,SAErDoB,GACCrB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kCAAkCqB,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAWzB,SAAA,EACjHC,EAAAA,EAAAA,KAAA,UAAQC,UAAU,aAAawB,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,OAAO,eAAeC,YAAY,OACxF7B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAasB,KAAK,eAAeO,EAAE,wHAIrD9B,EAAAA,EAAAA,KAAA,OAAKsB,MAAM,6BAA6BrB,UAAU,UAAUuB,QAAQ,YAAYD,KAAK,eAAcxB,UACjGC,EAAAA,EAAAA,KAAA,QAAM+B,SAAS,UAAUD,EAAE,uSAAuSE,SAAS,eAIxU,EC+Cb,EAxEgD9B,IAMzC,IAN0C,OAC/C+B,EAAM,QACNC,EAAO,eACPlB,EAAc,SACdjB,EAAQ,MACRoC,EAAQ,mFACTjC,EAOC,OACEJ,EAAAA,EAAAA,MAAAsC,EAAAA,SAAA,CAAArC,SAAA,CAEGkC,IACCjC,EAAAA,EAAAA,KAAA,OACEC,UAAU,kGACViB,QAASgB,EACT,cAAY,UAKhBlC,EAAAA,EAAAA,KAAA,OACEC,UAAW,qLAEEgC,EAAS,gBAAkB,qBACxCI,KAAK,SACL,aAAW,OACX,kBAAgB,qBAChBC,aAAcJ,EAASnC,UAEvBD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uBAAsBF,SAAA,EAEnCD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sFAAqFF,SAAA,EAClGC,EAAAA,EAAAA,KAAA,MAAIuC,GAAG,qBAAqBtC,UAAU,yDAAwDF,SAC3FoC,KAEHnC,EAAAA,EAAAA,KAAA,UACEkB,QAASgB,EACT,aAAW,mIACXjC,UAAU,kJAAiJF,UAG3JC,EAAAA,EAAAA,KAAA,OAAKsB,MAAM,6BAA6BrB,UAAU,UAAUsB,KAAK,OAAOC,QAAQ,YAAYI,OAAO,eAAc7B,UAC/GC,EAAAA,EAAAA,KAAA,QAAMwC,cAAc,QAAQC,eAAe,QAAQZ,YAAa,EAAGC,EAAE,iCAM3E9B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0CAAyCF,SACrDA,KAIHC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oDAAmDF,UAChEC,EAAAA,EAAAA,KAAA,UACEkB,QAASF,EACTf,UAAU,6PAA4PF,SACvQ,wIAMN,E,kCCjEP,MAwEA,EAxE8CG,IAMvC,IANwC,SAC7CH,EAAQ,mBACRa,EAAkB,UAClBC,EAAS,aACTT,GAAe,EAAK,eACpBY,GACDd,EACC,MAAM,kBAAEwC,EAAiB,gBAAEC,EAAe,iBAAEC,IAAqBC,EAAAA,EAAAA,MAC1DC,EAAmBC,IAAwBzC,EAAAA,EAAAA,WAAS,GAwB3D,OACER,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mCAAkCF,SAAA,EAC/CD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gCAA+BF,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OACEC,UAAU,sEACV+C,aAAcL,EAAgB5C,UAE9BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gGAGjBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BF,SAC3CA,QAILC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BF,UAC1CC,EAAAA,EAAAA,KAACiD,EAAa,CAAC/B,QAtCMgC,KACzBH,GAAqB,EAAK,EAqCsB5B,UAAWf,OAGzDJ,EAAAA,EAAAA,KAACmD,EAAW,CACVlB,OAAQS,EACRR,QAASU,EACT5B,eAAgBA,EAAejB,SAE9Ba,KAIHZ,EAAAA,EAAAA,KAACoD,EAAAA,EAAa,CACZC,KAAMP,EACNZ,QAASA,IAAMa,GAAqB,GACpCO,eAjDqBC,MAAOC,EAAcC,KAC9C,IASE,WARuBC,MAAM,6BAA8B,CACzDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEP,OAAMC,cAGjBO,GACZ,MAAM,IAAIC,MAAM,0BAEpB,CAAE,MAAOC,GACPzD,QAAQyD,MAAM,0BAA2BA,EAC3C,MAsCElE,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,MACV,C","sources":["pages/ClientsPage.tsx","components/common/RefreshButton.tsx","components/common/FilterPanel.tsx","layouts/MainLayout.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainLayout from '../layouts/MainLayout';\n\n// Placeholder for actual filter components for Clients\nconst ClientsFilterPanelContent: React.FC = () => {\n  return (\n    <div>\n      <h3 className=\"text-md font-semibold mb-2 text-gray-700 dark:text-gray-200\">Тип клієнта</h3>\n      <div className=\"p-2 border border-dashed rounded mb-4 h-20 flex items-center justify-center text-sm text-gray-400 dark:text-gray-500\">Client Type Filter</div>\n      \n      <h3 className=\"text-md font-semibold mb-2 text-gray-700 dark:text-gray-200\">Статус</h3>\n      <div className=\"p-2 border border-dashed rounded mb-4 h-20 flex items-center justify-center text-sm text-gray-400 dark:text-gray-500\">Client Status Filter</div>\n\n      <h3 className=\"text-md font-semibold mb-3 text-gray-700 dark:text-gray-200\">Загальна сума замовлень</h3>\n      <div className=\"p-2 border border-dashed rounded mb-4 h-16 flex items-center justify-center text-sm text-gray-400 dark:text-gray-500\">Total Order Value Slider</div>\n      \n      <p className=\"text-xs text-center text-gray-400 dark:text-gray-500\">More client filters...</p>\n    </div>\n  );\n};\n\ninterface ClientsPageProps {\n  currentSearchTerm: string;\n}\n\nconst ClientsPage: React.FC<ClientsPageProps> = ({ currentSearchTerm }) => {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  useEffect(() => {\n    if (currentSearchTerm !== undefined) {\n        console.log('ClientsPage received search term:', currentSearchTerm);\n        // TODO: Implement filtering\n    }\n  }, [currentSearchTerm]);\n\n  const handleRefresh = () => {\n    console.log('Refreshing clients...');\n    setIsRefreshing(true);\n    setTimeout(() => {\n      setIsRefreshing(false);\n      console.log('Clients refreshed!');\n    }, 1500);\n  };\n\n  const handleResetFilters = () => {\n    console.log('Resetting client filters...');\n  };\n\n  return (\n    <MainLayout\n      filterPanelContent={<ClientsFilterPanelContent />}\n      onRefresh={handleRefresh}\n      isRefreshing={isRefreshing}\n      onResetFilters={handleResetFilters}\n    >\n      <div className=\"p-4 bg-white dark:bg-gray-800 shadow-md rounded-lg\">\n        <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">Клієнти</h1>\n            {currentSearchTerm && <p className='text-sm text-gray-500 dark:text-gray-400'>Активний пошук: \"{currentSearchTerm}\"</p>}\n        </div>\n        \n        <div className=\"table-placeholder min-h-[60vh] border border-dashed border-gray-300 dark:border-gray-600 rounded flex justify-center items-center\">\n          <p className=\"text-gray-500 dark:text-gray-400\">Таблиця клієнтів буде тут</p>\n        </div>\n        {/* No specific checkboxes under table for clients in the initial request */}\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default ClientsPage; ","import React from 'react';\n\ninterface RefreshButtonProps {\n  onClick: () => void;\n  isLoading?: boolean;\n  label?: string;\n}\n\nconst RefreshButton: React.FC<RefreshButtonProps> = ({\n  onClick,\n  isLoading = false,\n  label = \"Оновити дані\"\n}) => {\n  return (\n    <button\n      onClick={onClick}\n      disabled={isLoading}\n      aria-label={label}\n      className={`p-2 rounded-full flex items-center justify-center \n                 bg-blue-500 hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700 \n                 text-white transition-all duration-150 ease-in-out \n                 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800\n                 disabled:opacity-50 disabled:cursor-not-allowed \n                 transform hover:scale-105 active:scale-95`}\n    >\n      {isLoading ? (\n        <svg className=\"animate-spin h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      ) : (\n        // Refresh Icon SVG (Unicode U+1F504 might not render consistently, so SVG is better)\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clipRule=\"evenodd\" />\n        </svg>\n      )}\n      {/* {label && !isLoading && <span className=\"ml-2\">{label}</span>} */}\n    </button>\n  );\n};\n\nexport default RefreshButton; ","import React from 'react';\n// Removed unused context import to potentially resolve linter issue\n// import { useFilterPanel } from '../contexts/FilterPanelContext'; \n\ninterface FilterPanelProps {\n  isOpen: boolean;\n  onClose: () => void; // Keep onClose prop as MainLayout passes context close function\n  onResetFilters: () => void;\n  children: React.ReactNode; // Specific filters will be passed as children\n  title?: string;\n}\n\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  isOpen,\n  onClose, // Received from MainLayout (which got it from context)\n  onResetFilters,\n  children,\n  title = \"Фільтри пошуку\"\n}) => {\n  // Can also get controls directly from context if needed here\n  // const { closeFilterPanel } = useFilterPanel(); \n  \n  // Using the passed onClose function (which comes from context via MainLayout)\n  // for both the X button and the mouse leave event.\n\n  return (\n    <>\n      {/* Overlay for when the panel is open */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-30 transition-opacity duration-300 ease-in-out md:hidden\"\n          onClick={onClose} // Use onClose from props\n          aria-hidden=\"true\"\n        ></div>\n      )}\n\n      {/* Filter Panel */}\n      <div\n        className={`fixed top-0 left-0 h-full w-72 sm:w-80 bg-white dark:bg-gray-800 shadow-xl z-40\n                   transform transition-transform duration-300 ease-in-out \n                   ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"filter-panel-title\"\n        onMouseLeave={onClose} // Use onClose from props\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n            <h2 id=\"filter-panel-title\" className=\"text-lg font-semibold text-gray-800 dark:text-gray-100\">\n              {title}\n            </h2>\n            <button \n              onClick={onClose} // Use onClose from props\n              aria-label=\"Закрити панель фільтрів\"\n              className=\"p-1 rounded-md text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            >\n              {/* Close Icon (X) */}\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Filter Content Area */}\n          <div className=\"flex-grow p-4 overflow-y-auto space-y-6\">\n            {children}\n          </div>\n\n          {/* Footer / Reset Button */}\n          <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n            <button\n              onClick={onResetFilters}\n              className=\"w-full px-4 py-2 bg-red-500 hover:bg-red-600 dark:bg-red-600 dark:hover:bg-red-700 text-white rounded-lg font-medium transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800\"\n            >\n              Скинути фільтри пошуку\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FilterPanel; ","import React, { useState } from 'react';\nimport RefreshButton from '../components/common/RefreshButton';\nimport FilterPanel from '../components/common/FilterPanel';\nimport { useFilterPanel } from '../contexts/FilterPanelContext';\nimport { ParsingDialog } from '../components/ParsingDialog';\nimport { ParsingStatus } from '../components/ParsingStatus';\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n  filterPanelContent: React.ReactNode;\n  onRefresh: () => void;\n  isRefreshing?: boolean;\n  onResetFilters: () => void;\n}\n\nconst MainLayout: React.FC<MainLayoutProps> = ({\n  children,\n  filterPanelContent,\n  onRefresh,\n  isRefreshing = false,\n  onResetFilters,\n}) => {\n  const { isFilterPanelOpen, openFilterPanel, closeFilterPanel } = useFilterPanel();\n  const [parsingDialogOpen, setParsingDialogOpen] = useState(false);\n\n  const handleRefreshClick = () => {\n    setParsingDialogOpen(true);\n  };\n\n  const handleStartParsing = async (mode: string, params: any) => {\n    try {\n      const response = await fetch('/api/parsing/parsing/start', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ mode, params }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to start parsing');\n      }\n    } catch (error) {\n      console.error('Error starting parsing:', error);\n    }\n  };\n\n  return (\n    <div className=\"main-layout flex flex-col h-full\">\n      <div className=\"flex flex-row flex-grow gap-4\">\n        <div \n          className=\"hidden sm:block fixed left-0 top-0 bottom-0 w-4 z-30 cursor-pointer\"\n          onMouseEnter={openFilterPanel}\n        >\n          <div className=\"h-full w-px bg-gray-300 dark:bg-gray-600 opacity-50 hover:opacity-100 transition-opacity\"></div>\n        </div>\n\n        <div className=\"content-area flex-grow w-full\">\n          {children}\n        </div>\n      </div>\n      \n      <div className=\"fixed bottom-6 right-6 z-20\">\n        <RefreshButton onClick={handleRefreshClick} isLoading={isRefreshing} />\n      </div>\n\n      <FilterPanel \n        isOpen={isFilterPanelOpen} \n        onClose={closeFilterPanel}\n        onResetFilters={onResetFilters}\n      >\n        {filterPanelContent}\n      </FilterPanel>\n\n      {/* Діалог парсингу */}\n      <ParsingDialog\n        open={parsingDialogOpen}\n        onClose={() => setParsingDialogOpen(false)}\n        onStartParsing={handleStartParsing}\n      />\n\n      {/* Статус парсингу */}\n      <ParsingStatus />\n    </div>\n  );\n};\n\nexport default MainLayout; "],"names":["ClientsFilterPanelContent","_jsxs","children","_jsx","className","_ref","currentSearchTerm","isRefreshing","setIsRefreshing","useState","useEffect","undefined","console","log","MainLayout","filterPanelContent","onRefresh","handleRefresh","setTimeout","onResetFilters","handleResetFilters","onClick","isLoading","label","disabled","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","fillRule","clipRule","isOpen","onClose","title","_Fragment","role","onMouseLeave","id","strokeLinecap","strokeLinejoin","isFilterPanelOpen","openFilterPanel","closeFilterPanel","useFilterPanel","parsingDialogOpen","setParsingDialogOpen","onMouseEnter","RefreshButton","handleRefreshClick","FilterPanel","ParsingDialog","open","onStartParsing","async","mode","params","fetch","method","headers","body","JSON","stringify","ok","Error","error","ParsingStatus"],"sourceRoot":""}