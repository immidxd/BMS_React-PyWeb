{"ast":null,"code":"import axios from'axios';// Type definitions for Order API\n// API functions\nexport const fetchOrders=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let filters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};// Build query parameters\nconst params=new URLSearchParams();params.append('page',page.toString());params.append('per_page',perPage.toString());// Add filters to query parameters\nif(filters.search)params.append('search',filters.search);if(filters.client_id!==undefined)params.append('client_id',filters.client_id.toString());if(filters.date_from)params.append('date_from',filters.date_from);if(filters.date_to)params.append('date_to',filters.date_to);if(filters.month_min!==undefined)params.append('month_min',filters.month_min.toString());if(filters.month_max!==undefined)params.append('month_max',filters.month_max.toString());if(filters.year_min!==undefined)params.append('year_min',filters.year_min.toString());if(filters.year_max!==undefined)params.append('year_max',filters.year_max.toString());// Add array filters\nif(filters.order_status_ids&&filters.order_status_ids.length>0){filters.order_status_ids.forEach(id=>params.append('order_status_ids',id.toString()));}if(filters.payment_status_ids&&filters.payment_status_ids.length>0){filters.payment_status_ids.forEach(id=>params.append('payment_status_ids',id.toString()));}if(filters.delivery_method_ids&&filters.delivery_method_ids.length>0){filters.delivery_method_ids.forEach(id=>params.append('delivery_method_ids',id.toString()));}const response=await axios.get(`/api/orders?${params.toString()}`);return response.data;};export const fetchOrderFilters=async()=>{const response=await axios.get('/api/orders/filters');return response.data;};export const fetchOrder=async id=>{const response=await axios.get(`/api/orders/${id}`);return response.data;};export const fetchOrderProducts=async id=>{const response=await axios.get(`/api/orders/${id}/products`);return response.data;};export const createOrder=async order=>{const response=await axios.post('/api/orders',order);return response.data;};export const updateOrder=async(id,order)=>{const response=await axios.put(`/api/orders/${id}`,order);return response.data;};export const deleteOrder=async id=>{const response=await axios.delete(`/api/orders/${id}`);return response.data;};","map":{"version":3,"names":["axios","fetchOrders","page","arguments","length","undefined","perPage","filters","params","URLSearchParams","append","toString","search","client_id","date_from","date_to","month_min","month_max","year_min","year_max","order_status_ids","forEach","id","payment_status_ids","delivery_method_ids","response","get","data","fetchOrderFilters","fetchOrder","fetchOrderProducts","createOrder","order","post","updateOrder","put","deleteOrder","delete"],"sources":["/Users/i.malashenko/Desktop/project копія/react-fastapi-app/frontend/src/services/orderService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Product } from './productService';\n\n// Type definitions for Order API\nexport interface OrderDetail {\n  id: number;\n  order_id: number;\n  product_id: number;\n  quantity: number;\n  price: number;\n  discount_value: number;\n  notes: string | null;\n}\n\nexport interface Order {\n  id: number;\n  client_id: number;\n  order_date: string;\n  order_status_id: number;\n  payment_status_id: number;\n  delivery_method_id: number;\n  total_amount: number;\n  tracking_number: string | null;\n  notes: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface OrderWithDetails extends Order {\n  client_name: string;\n  order_status_name: string;\n  payment_status_name: string;\n  delivery_method_name: string;\n  order_details: OrderDetail[];\n}\n\nexport interface OrderWithProducts extends Order {\n  products: Product[];\n}\n\nexport interface OrdersResponse {\n  items: OrderWithDetails[];\n  total: number;\n  page: number;\n  per_page: number;\n  pages: number;\n}\n\nexport interface OrderFilters {\n  order_status_ids?: number[];\n  payment_status_ids?: number[];\n  delivery_method_ids?: number[];\n  client_id?: number;\n  date_from?: string;\n  date_to?: string;\n  month_min?: number;\n  month_max?: number;\n  year_min?: number;\n  year_max?: number;\n  search?: string;\n  only_pending?: boolean;\n  statuses?: string[];\n  customers?: string[];\n  shipping_methods?: string[];\n  payment_methods?: string[];\n}\n\nexport interface OrderFilterOptions {\n  statuses: string[];\n  customers: string[];\n  shipping_methods: string[];\n  payment_methods: string[];\n}\n\nexport interface OrderDetailCreate {\n  product_id: number;\n  quantity: number;\n  price: number;\n  discount_value?: number;\n  notes?: string;\n}\n\nexport interface OrderCreate {\n  client_id: number;\n  order_status_id: number;\n  payment_status_id: number;\n  delivery_method_id: number;\n  total_amount?: number;\n  tracking_number?: string;\n  notes?: string;\n  order_details: OrderDetailCreate[];\n}\n\n// API functions\nexport const fetchOrders = async (\n  page: number = 1,\n  perPage: number = 20,\n  filters: OrderFilters = {}\n): Promise<OrdersResponse> => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n  \n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.client_id !== undefined) params.append('client_id', filters.client_id.toString());\n  if (filters.date_from) params.append('date_from', filters.date_from);\n  if (filters.date_to) params.append('date_to', filters.date_to);\n  if (filters.month_min !== undefined) params.append('month_min', filters.month_min.toString());\n  if (filters.month_max !== undefined) params.append('month_max', filters.month_max.toString());\n  if (filters.year_min !== undefined) params.append('year_min', filters.year_min.toString());\n  if (filters.year_max !== undefined) params.append('year_max', filters.year_max.toString());\n  \n  // Add array filters\n  if (filters.order_status_ids && filters.order_status_ids.length > 0) {\n    filters.order_status_ids.forEach(id => params.append('order_status_ids', id.toString()));\n  }\n  \n  if (filters.payment_status_ids && filters.payment_status_ids.length > 0) {\n    filters.payment_status_ids.forEach(id => params.append('payment_status_ids', id.toString()));\n  }\n  \n  if (filters.delivery_method_ids && filters.delivery_method_ids.length > 0) {\n    filters.delivery_method_ids.forEach(id => params.append('delivery_method_ids', id.toString()));\n  }\n  \n  const response = await axios.get(`/api/orders?${params.toString()}`);\n  return response.data;\n};\n\nexport const fetchOrderFilters = async (): Promise<OrderFilterOptions> => {\n  const response = await axios.get('/api/orders/filters');\n  return response.data;\n};\n\nexport const fetchOrder = async (id: number): Promise<OrderWithDetails> => {\n  const response = await axios.get(`/api/orders/${id}`);\n  return response.data;\n};\n\nexport const fetchOrderProducts = async (id: number): Promise<OrderWithProducts> => {\n  const response = await axios.get(`/api/orders/${id}/products`);\n  return response.data;\n};\n\nexport const createOrder = async (order: OrderCreate): Promise<Order> => {\n  const response = await axios.post('/api/orders', order);\n  return response.data;\n};\n\nexport const updateOrder = async (id: number, order: Partial<OrderCreate>): Promise<Order> => {\n  const response = await axios.put(`/api/orders/${id}`, order);\n  return response.data;\n};\n\nexport const deleteOrder = async (id: number): Promise<{ message: string }> => {\n  const response = await axios.delete(`/api/orders/${id}`);\n  return response.data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}