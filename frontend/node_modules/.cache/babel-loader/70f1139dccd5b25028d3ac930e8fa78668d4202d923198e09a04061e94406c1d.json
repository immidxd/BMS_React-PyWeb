{"ast":null,"code":"import axios from 'axios';\n\n// Type definitions for Product API\n\n// API functions\nexport const fetchProducts = async (page = 1, perPage = 20, filters = {}) => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n\n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.only_unsold) params.append('only_unsold', 'true');\n  if (filters.visible_only) params.append('visible_only', 'true');\n  if (filters.price_min !== undefined) params.append('price_min', filters.price_min.toString());\n  if (filters.price_max !== undefined) params.append('price_max', filters.price_max.toString());\n  if (filters.size_min) params.append('size_min', filters.size_min);\n  if (filters.size_max) params.append('size_max', filters.size_max);\n\n  // Add array filters\n  if (filters.brands && filters.brands.length > 0) {\n    filters.brands.forEach(brand => params.append('brands', brand));\n  }\n  if (filters.types && filters.types.length > 0) {\n    filters.types.forEach(type => params.append('types', type));\n  }\n  if (filters.subtypes && filters.subtypes.length > 0) {\n    filters.subtypes.forEach(subtype => params.append('subtypes', subtype));\n  }\n  if (filters.colors && filters.colors.length > 0) {\n    filters.colors.forEach(color => params.append('colors', color));\n  }\n  if (filters.countries && filters.countries.length > 0) {\n    filters.countries.forEach(country => params.append('countries', country));\n  }\n  if (filters.status && filters.status.length > 0) {\n    filters.status.forEach(status => params.append('status', status));\n  }\n  if (filters.condition && filters.condition.length > 0) {\n    filters.condition.forEach(condition => params.append('condition', condition));\n  }\n  const response = await axios.get(`/api/products?${params.toString()}`);\n  return response.data;\n};\nexport const fetchProduct = async id => {\n  const response = await axios.get(`/api/products/${id}`);\n  return response.data;\n};\nexport const createProduct = async product => {\n  const response = await axios.post('/api/products', product);\n  return response.data;\n};\nexport const updateProduct = async (id, product) => {\n  const response = await axios.put(`/api/products/${id}`, product);\n  return response.data;\n};\nexport const deleteProduct = async id => {\n  const response = await axios.delete(`/api/products/${id}`);\n  return response.data;\n};\nexport const fetchProductFilters = async () => {\n  const response = await axios.get('/api/products/filters');\n  return response.data;\n};\nexport const toggleProductVisibility = async id => {\n  const response = await axios.patch(`/api/products/${id}/toggle_visibility`);\n  return response.data;\n};","map":{"version":3,"names":["axios","fetchProducts","page","perPage","filters","params","URLSearchParams","append","toString","search","only_unsold","visible_only","price_min","undefined","price_max","size_min","size_max","brands","length","forEach","brand","types","type","subtypes","subtype","colors","color","countries","country","status","condition","response","get","data","fetchProduct","id","createProduct","product","post","updateProduct","put","deleteProduct","delete","fetchProductFilters","toggleProductVisibility","patch"],"sources":["/Users/i.malashenko/Desktop/project копія/react-fastapi-app/frontend/src/services/productService.ts"],"sourcesContent":["import axios from 'axios';\n\n// Type definitions for Product API\nexport interface Product {\n  id: number;\n  productnumber: string;\n  typename: string | null;\n  subtypename: string | null;\n  brandname: string | null;\n  model: string | null;\n  price: number;\n  oldprice: number | null;\n  statusname: string | null;\n  conditionname: string | null;\n  import_status: string | null;\n  color: string | null;\n  country: string | null;\n  size: string | null;\n  dimensions: string | null;\n  quantity: number;\n  image_url: string | null;\n  description: string | null;\n  is_visible: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProductsResponse {\n  items: Product[];\n  total: number;\n  page: number;\n  per_page: number;\n  pages: number;\n}\n\nexport interface ProductFilters {\n  brands?: string[];\n  types?: string[];\n  subtypes?: string[];\n  colors?: string[];\n  countries?: string[];\n  status?: string[];\n  condition?: string[];\n  price_min?: number;\n  price_max?: number;\n  size_min?: string;\n  size_max?: string;\n  only_unsold?: boolean;\n  visible_only?: boolean;\n  search?: string;\n}\n\nexport interface ProductCreate {\n  productnumber: string;\n  typename?: string;\n  subtypename?: string;\n  brandname?: string;\n  model?: string;\n  price?: number;\n  oldprice?: number;\n  statusname?: string;\n  conditionname?: string;\n  import_status?: string;\n  color?: string;\n  country?: string;\n  size?: string;\n  dimensions?: string;\n  quantity?: number;\n  image_url?: string;\n  description?: string;\n}\n\nexport interface ProductFiltersOptions {\n  brands: string[];\n  types: string[];\n  colors: string[];\n  countries: string[];\n  statuses: string[];\n  conditions: string[];\n  price_range: {\n    min: number;\n    max: number;\n  };\n  size_range: {\n    min: string;\n    max: string;\n  };\n}\n\n// API functions\nexport const fetchProducts = async (\n  page: number = 1,\n  perPage: number = 20,\n  filters: ProductFilters = {}\n): Promise<ProductsResponse> => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n  \n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.only_unsold) params.append('only_unsold', 'true');\n  if (filters.visible_only) params.append('visible_only', 'true');\n  if (filters.price_min !== undefined) params.append('price_min', filters.price_min.toString());\n  if (filters.price_max !== undefined) params.append('price_max', filters.price_max.toString());\n  if (filters.size_min) params.append('size_min', filters.size_min);\n  if (filters.size_max) params.append('size_max', filters.size_max);\n  \n  // Add array filters\n  if (filters.brands && filters.brands.length > 0) {\n    filters.brands.forEach(brand => params.append('brands', brand));\n  }\n  \n  if (filters.types && filters.types.length > 0) {\n    filters.types.forEach(type => params.append('types', type));\n  }\n  \n  if (filters.subtypes && filters.subtypes.length > 0) {\n    filters.subtypes.forEach(subtype => params.append('subtypes', subtype));\n  }\n  \n  if (filters.colors && filters.colors.length > 0) {\n    filters.colors.forEach(color => params.append('colors', color));\n  }\n  \n  if (filters.countries && filters.countries.length > 0) {\n    filters.countries.forEach(country => params.append('countries', country));\n  }\n  \n  if (filters.status && filters.status.length > 0) {\n    filters.status.forEach(status => params.append('status', status));\n  }\n  \n  if (filters.condition && filters.condition.length > 0) {\n    filters.condition.forEach(condition => params.append('condition', condition));\n  }\n  \n  const response = await axios.get(`/api/products?${params.toString()}`);\n  return response.data;\n};\n\nexport const fetchProduct = async (id: number): Promise<Product> => {\n  const response = await axios.get(`/api/products/${id}`);\n  return response.data;\n};\n\nexport const createProduct = async (product: ProductCreate): Promise<Product> => {\n  const response = await axios.post('/api/products', product);\n  return response.data;\n};\n\nexport const updateProduct = async (id: number, product: Partial<ProductCreate>): Promise<Product> => {\n  const response = await axios.put(`/api/products/${id}`, product);\n  return response.data;\n};\n\nexport const deleteProduct = async (id: number): Promise<{ message: string }> => {\n  const response = await axios.delete(`/api/products/${id}`);\n  return response.data;\n};\n\nexport const fetchProductFilters = async (): Promise<ProductFiltersOptions> => {\n  const response = await axios.get('/api/products/filters');\n  return response.data;\n};\n\nexport const toggleProductVisibility = async (id: number): Promise<Product> => {\n  const response = await axios.patch(`/api/products/${id}/toggle_visibility`);\n  return response.data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}