{"ast":null,"code":"import axios from'axios';// Визначаємо базовий URL для API\n// У розробці використовуємо localhost:8000, у production - поточний origin\nconst baseURL=process.env.NODE_ENV==='development'?'http://localhost:8000':window.location.origin;// Налаштування базового URL для всіх запитів\naxios.defaults.baseURL=baseURL;axios.defaults.withCredentials=true;// Дозволяємо передачу credentials\n// Додаємо обробник помилок для API\nexport const API_ERROR_EVENT='api-connection-error';// Функція для емітування події про помилку з'єднання\nexport const emitConnectionError=()=>{const event=new CustomEvent(API_ERROR_EVENT,{detail:{message:'Помилка з\\'єднання з сервером: використовуються тестові дані.'}});window.dispatchEvent(event);};// Додавання інтерсепторів для відстеження та обробки помилок\naxios.interceptors.request.use(config=>{var _config$method;console.log(`[API Request] ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);// Логуємо тільки в режимі розробки\nif(process.env.NODE_ENV==='development'){console.log('Request Config:',config);}return config;},error=>{console.error('[API Request Error]',error);return Promise.reject(error);});axios.interceptors.response.use(response=>{console.log(`[API Response] ${response.status} from ${response.config.url}`);// Логуємо тільки в режимі розробки\nif(process.env.NODE_ENV==='development'){console.log('Response Data:',response.data);}return response;},error=>{// Якщо бекенд недоступний - показуємо спеціальне повідомлення\nif(!error.response){console.error('[API Network Error] Не вдалося з\\'єднатися з сервером');emitConnectionError();}else{console.error('[API Response Error]',error.response.status,error.response.data);}return Promise.reject(error);});export default axios;","map":{"version":3,"names":["axios","baseURL","process","env","NODE_ENV","window","location","origin","defaults","withCredentials","API_ERROR_EVENT","emitConnectionError","event","CustomEvent","detail","message","dispatchEvent","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data"],"sources":["/Users/i.malashenko/Desktop/react-fastapi-app/frontend/src/services/axiosConfig.ts"],"sourcesContent":["import axios from 'axios';\n\n// Визначаємо базовий URL для API\n// У розробці використовуємо localhost:8000, у production - поточний origin\nconst baseURL = process.env.NODE_ENV === 'development' \n  ? 'http://localhost:8000' \n  : window.location.origin;\n\n// Налаштування базового URL для всіх запитів\naxios.defaults.baseURL = baseURL;\naxios.defaults.withCredentials = true; // Дозволяємо передачу credentials\n\n// Додаємо обробник помилок для API\nexport const API_ERROR_EVENT = 'api-connection-error';\n\n// Функція для емітування події про помилку з'єднання\nexport const emitConnectionError = () => {\n  const event = new CustomEvent(API_ERROR_EVENT, { \n    detail: { message: 'Помилка з\\'єднання з сервером: використовуються тестові дані.' } \n  });\n  window.dispatchEvent(event);\n};\n\n// Додавання інтерсепторів для відстеження та обробки помилок\naxios.interceptors.request.use(\n  config => {\n    console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`);\n    \n    // Логуємо тільки в режимі розробки\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Request Config:', config);\n    }\n    return config;\n  },\n  error => {\n    console.error('[API Request Error]', error);\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  response => {\n    console.log(`[API Response] ${response.status} from ${response.config.url}`);\n    \n    // Логуємо тільки в режимі розробки\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Response Data:', response.data);\n    }\n    return response;\n  },\n  error => {\n    // Якщо бекенд недоступний - показуємо спеціальне повідомлення\n    if (!error.response) {\n      console.error('[API Network Error] Не вдалося з\\'єднатися з сервером');\n      emitConnectionError();\n    } else {\n      console.error('[API Response Error]', error.response.status, error.response.data);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axios; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAClD,uBAAuB,CACvBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAE1B;AACAP,KAAK,CAACQ,QAAQ,CAACP,OAAO,CAAGA,OAAO,CAChCD,KAAK,CAACQ,QAAQ,CAACC,eAAe,CAAG,IAAI,CAAE;AAEvC;AACA,MAAO,MAAM,CAAAC,eAAe,CAAG,sBAAsB,CAErD;AACA,MAAO,MAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,CACvC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,WAAW,CAACH,eAAe,CAAE,CAC7CI,MAAM,CAAE,CAAEC,OAAO,CAAE,+DAAgE,CACrF,CAAC,CAAC,CACFV,MAAM,CAACW,aAAa,CAACJ,KAAK,CAAC,CAC7B,CAAC,CAED;AACAZ,KAAK,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,EAAI,KAAAC,cAAA,CACRC,OAAO,CAACC,GAAG,CAAC,kBAAAF,cAAA,CAAiBD,MAAM,CAACI,MAAM,UAAAH,cAAA,iBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIL,MAAM,CAACM,GAAG,EAAE,CAAC,CAE1E;AACA,GAAIxB,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAAE,CAC1CkB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEH,MAAM,CAAC,CACxC,CACA,MAAO,CAAAA,MAAM,CACf,CAAC,CACDO,KAAK,EAAI,CACPL,OAAO,CAACK,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED3B,KAAK,CAACiB,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC7BW,QAAQ,EAAI,CACVR,OAAO,CAACC,GAAG,CAAC,kBAAkBO,QAAQ,CAACC,MAAM,SAASD,QAAQ,CAACV,MAAM,CAACM,GAAG,EAAE,CAAC,CAE5E;AACA,GAAIxB,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAAE,CAC1CkB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEO,QAAQ,CAACE,IAAI,CAAC,CAC9C,CACA,MAAO,CAAAF,QAAQ,CACjB,CAAC,CACDH,KAAK,EAAI,CACP;AACA,GAAI,CAACA,KAAK,CAACG,QAAQ,CAAE,CACnBR,OAAO,CAACK,KAAK,CAAC,uDAAuD,CAAC,CACtEhB,mBAAmB,CAAC,CAAC,CACvB,CAAC,IAAM,CACLW,OAAO,CAACK,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAACG,QAAQ,CAACC,MAAM,CAAEJ,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC,CACnF,CACA,MAAO,CAAAJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAA3B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}