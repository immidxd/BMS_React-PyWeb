{"ast":null,"code":"import axios from'axios';// Type definitions for Product API\n// API functions\nexport const fetchProducts=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let filters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};// Build query parameters\nconst params=new URLSearchParams();params.append('page',page.toString());params.append('per_page',perPage.toString());// Add filters to query parameters\nif(filters.search)params.append('search',filters.search);if(filters.only_unsold)params.append('only_unsold','true');if(filters.visible_only)params.append('visible_only','true');if(filters.price_min!==undefined)params.append('price_min',filters.price_min.toString());if(filters.price_max!==undefined)params.append('price_max',filters.price_max.toString());if(filters.size_min)params.append('size_min',filters.size_min);if(filters.size_max)params.append('size_max',filters.size_max);// Add array filters\nif(filters.brands&&filters.brands.length>0){filters.brands.forEach(brand=>params.append('brands',brand));}if(filters.types&&filters.types.length>0){filters.types.forEach(type=>params.append('types',type));}if(filters.subtypes&&filters.subtypes.length>0){filters.subtypes.forEach(subtype=>params.append('subtypes',subtype));}if(filters.colors&&filters.colors.length>0){filters.colors.forEach(color=>params.append('colors',color));}if(filters.countries&&filters.countries.length>0){filters.countries.forEach(country=>params.append('countries',country));}if(filters.status&&filters.status.length>0){filters.status.forEach(status=>params.append('status',status));}if(filters.condition&&filters.condition.length>0){filters.condition.forEach(condition=>params.append('condition',condition));}const response=await axios.get(`/api/products?${params.toString()}`);return response.data;};export const fetchProduct=async id=>{const response=await axios.get(`/api/products/${id}`);return response.data;};export const createProduct=async product=>{const response=await axios.post('/api/products',product);return response.data;};export const updateProduct=async(id,product)=>{const response=await axios.put(`/api/products/${id}`,product);return response.data;};export const deleteProduct=async id=>{const response=await axios.delete(`/api/products/${id}`);return response.data;};export const fetchProductFilters=async()=>{const response=await axios.get('/api/products/filters');return response.data;};export const toggleProductVisibility=async id=>{const response=await axios.patch(`/api/products/${id}/toggle_visibility`);return response.data;};","map":{"version":3,"names":["axios","fetchProducts","page","arguments","length","undefined","perPage","filters","params","URLSearchParams","append","toString","search","only_unsold","visible_only","price_min","price_max","size_min","size_max","brands","forEach","brand","types","type","subtypes","subtype","colors","color","countries","country","status","condition","response","get","data","fetchProduct","id","createProduct","product","post","updateProduct","put","deleteProduct","delete","fetchProductFilters","toggleProductVisibility","patch"],"sources":["/Users/i.malashenko/Desktop/react-fastapi-app/frontend/src/services/productService.ts"],"sourcesContent":["import axios from 'axios';\n\n// Type definitions for Product API\nexport interface Product {\n  id: number;\n  productnumber: string;\n  typename: string | null;\n  subtypename: string | null;\n  brandname: string | null;\n  model: string | null;\n  price: number;\n  oldprice: number | null;\n  statusname: string | null;\n  conditionname: string | null;\n  import_status: string | null;\n  color: string | null;\n  country: string | null;\n  size: string | null;\n  dimensions: string | null;\n  quantity: number;\n  image_url: string | null;\n  description: string | null;\n  is_visible: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProductsResponse {\n  items: Product[];\n  total: number;\n  page: number;\n  per_page: number;\n  pages: number;\n}\n\nexport interface ProductFilters {\n  brands?: string[];\n  types?: string[];\n  subtypes?: string[];\n  colors?: string[];\n  countries?: string[];\n  status?: string[];\n  condition?: string[];\n  price_min?: number;\n  price_max?: number;\n  size_min?: string;\n  size_max?: string;\n  only_unsold?: boolean;\n  visible_only?: boolean;\n  search?: string;\n}\n\nexport interface ProductCreate {\n  productnumber: string;\n  typename?: string;\n  subtypename?: string;\n  brandname?: string;\n  model?: string;\n  price?: number;\n  oldprice?: number;\n  statusname?: string;\n  conditionname?: string;\n  import_status?: string;\n  color?: string;\n  country?: string;\n  size?: string;\n  dimensions?: string;\n  quantity?: number;\n  image_url?: string;\n  description?: string;\n}\n\nexport interface ProductFiltersOptions {\n  brands: string[];\n  types: string[];\n  colors: string[];\n  countries: string[];\n  statuses: string[];\n  conditions: string[];\n  price_range: {\n    min: number;\n    max: number;\n  };\n  size_range: {\n    min: string;\n    max: string;\n  };\n}\n\n// API functions\nexport const fetchProducts = async (\n  page: number = 1,\n  perPage: number = 20,\n  filters: ProductFilters = {}\n): Promise<ProductsResponse> => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n  \n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.only_unsold) params.append('only_unsold', 'true');\n  if (filters.visible_only) params.append('visible_only', 'true');\n  if (filters.price_min !== undefined) params.append('price_min', filters.price_min.toString());\n  if (filters.price_max !== undefined) params.append('price_max', filters.price_max.toString());\n  if (filters.size_min) params.append('size_min', filters.size_min);\n  if (filters.size_max) params.append('size_max', filters.size_max);\n  \n  // Add array filters\n  if (filters.brands && filters.brands.length > 0) {\n    filters.brands.forEach(brand => params.append('brands', brand));\n  }\n  \n  if (filters.types && filters.types.length > 0) {\n    filters.types.forEach(type => params.append('types', type));\n  }\n  \n  if (filters.subtypes && filters.subtypes.length > 0) {\n    filters.subtypes.forEach(subtype => params.append('subtypes', subtype));\n  }\n  \n  if (filters.colors && filters.colors.length > 0) {\n    filters.colors.forEach(color => params.append('colors', color));\n  }\n  \n  if (filters.countries && filters.countries.length > 0) {\n    filters.countries.forEach(country => params.append('countries', country));\n  }\n  \n  if (filters.status && filters.status.length > 0) {\n    filters.status.forEach(status => params.append('status', status));\n  }\n  \n  if (filters.condition && filters.condition.length > 0) {\n    filters.condition.forEach(condition => params.append('condition', condition));\n  }\n  \n  const response = await axios.get(`/api/products?${params.toString()}`);\n  return response.data;\n};\n\nexport const fetchProduct = async (id: number): Promise<Product> => {\n  const response = await axios.get(`/api/products/${id}`);\n  return response.data;\n};\n\nexport const createProduct = async (product: ProductCreate): Promise<Product> => {\n  const response = await axios.post('/api/products', product);\n  return response.data;\n};\n\nexport const updateProduct = async (id: number, product: Partial<ProductCreate>): Promise<Product> => {\n  const response = await axios.put(`/api/products/${id}`, product);\n  return response.data;\n};\n\nexport const deleteProduct = async (id: number): Promise<{ message: string }> => {\n  const response = await axios.delete(`/api/products/${id}`);\n  return response.data;\n};\n\nexport const fetchProductFilters = async (): Promise<ProductFiltersOptions> => {\n  const response = await axios.get('/api/products/filters');\n  return response.data;\n};\n\nexport const toggleProductVisibility = async (id: number): Promise<Product> => {\n  const response = await axios.patch(`/api/products/${id}/toggle_visibility`);\n  return response.data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}