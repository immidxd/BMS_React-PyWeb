{"ast":null,"code":"import axios from'axios';// Базовий URL для API товарів\nconst API_URL='/api/products';// Додаю тип ProductListResponse тут, якщо його немає\n/**\n * Сервіс для роботи з API товарів\n */export const productService={/**\n     * Отримати список товарів з пагінацією та фільтрацією\n     */async getProducts(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const{skip=0,limit=10,sort_by='id',sort_dir='desc',...filters}=params;// Будуємо URL з параметрами\nconst queryParams=new URLSearchParams();queryParams.append('skip',skip.toString());queryParams.append('limit',limit.toString());queryParams.append('sort_by',sort_by);queryParams.append('sort_dir',sort_dir);// Додаємо фільтри, якщо вони вказані\nObject.entries(filters).forEach(_ref=>{let[key,value]=_ref;if(value!==undefined&&value!==null){queryParams.append(key,value.toString());}});console.log(\"Fetching products from API:\",`${API_URL}?${queryParams.toString()}`);// Add retry logic (max 3 retries)\nlet retries=0;const maxRetries=3;while(retries<maxRetries){try{const response=await axios.get(`${API_URL}?${queryParams.toString()}`);console.log(\"Products fetched successfully:\",response.data);return response.data;}catch(error){retries++;console.error(`Attempt ${retries}/${maxRetries} failed:`,error);if(retries>=maxRetries){throw error;}// Wait before retrying (exponential backoff)\nawait new Promise(resolve=>setTimeout(resolve,500*Math.pow(2,retries)));}}// If we reach here, all retries failed\nthrow new Error(\"Failed to fetch products after multiple attempts\");}catch(error){console.error('Error fetching products:',error);throw error;}},/**\n     * Отримати товар за ID\n     */async getProduct(id){try{const response=await axios.get(`${API_URL}/${id}`);return response.data;}catch(error){console.error(`Error fetching product ${id}:`,error);throw error;}},/**\n     * Створити новий товар\n     */async createProduct(productData){try{const response=await axios.post(API_URL,productData);return response.data;}catch(error){console.error('Error creating product:',error);throw error;}},/**\n     * Оновити існуючий товар\n     */async updateProduct(id,productData){try{const response=await axios.put(`${API_URL}/${id}`,productData);return response.data;}catch(error){console.error(`Error updating product ${id}:`,error);throw error;}},/**\n     * Видалити товар\n     */async deleteProduct(id){try{const response=await axios.delete(`${API_URL}/${id}`);return response.data;}catch(error){console.error(`Error deleting product ${id}:`,error);throw error;}},/**\n     * Оновити видимість товару\n     */async updateProductVisibility(id,isVisible){try{const response=await axios.patch(`${API_URL}/${id}/visibility`,{is_visible:isVisible});return response.data;}catch(error){console.error(`Error updating visibility for product ${id}:`,error);throw error;}},/**\n     * Масове оновлення товарів\n     */async bulkUpdateProducts(productIds,updateData){try{const response=await axios.post(`${API_URL}/bulk-update`,{product_ids:productIds,update_data:updateData});return response.data;}catch(error){console.error('Error bulk updating products:',error);throw error;}},/**\n     * Отримати доступні опції для фільтрів\n     */async getFilters(){try{const response=await axios.get(`${API_URL}/filters`);return response.data;}catch(error){console.error('Error fetching product filters:',error);throw error;}}};export default productService;","map":{"version":3,"names":["axios","API_URL","productService","getProducts","params","arguments","length","undefined","skip","limit","sort_by","sort_dir","filters","queryParams","URLSearchParams","append","toString","Object","entries","forEach","_ref","key","value","console","log","retries","maxRetries","response","get","data","error","Promise","resolve","setTimeout","Math","pow","Error","getProduct","id","createProduct","productData","post","updateProduct","put","deleteProduct","delete","updateProductVisibility","isVisible","patch","is_visible","bulkUpdateProducts","productIds","updateData","product_ids","update_data","getFilters"],"sources":["/Users/i.malashenko/Desktop/react-fastapi-app/frontend/src/services/productService.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n    Product,\n    ProductFilters\n} from '../types/product';\n\n// Базовий URL для API товарів\nconst API_URL = '/api/products';\n\n// Додаю тип ProductListResponse тут, якщо його немає\nexport type ProductListResponse = {\n    items: Product[];\n    total: number;\n    page: number;\n    per_page: number;\n    pages: number;\n};\n\n/**\n * Сервіс для роботи з API товарів\n */\nexport const productService = {\n    /**\n     * Отримати список товарів з пагінацією та фільтрацією\n     */\n    async getProducts(params: Record<string, any> = {}): Promise<ProductListResponse> {\n        try {\n            const { \n                skip = 0, \n                limit = 10, \n                sort_by = 'id', \n                sort_dir = 'desc',\n                ...filters \n            } = params;\n            \n            // Будуємо URL з параметрами\n            const queryParams = new URLSearchParams();\n            queryParams.append('skip', skip.toString());\n            queryParams.append('limit', limit.toString());\n            queryParams.append('sort_by', sort_by);\n            queryParams.append('sort_dir', sort_dir);\n            \n            // Додаємо фільтри, якщо вони вказані\n            Object.entries(filters).forEach(([key, value]) => {\n                if (value !== undefined && value !== null) {\n                    queryParams.append(key, value.toString());\n                }\n            });\n            \n            console.log(\"Fetching products from API:\", `${API_URL}?${queryParams.toString()}`);\n            \n            // Add retry logic (max 3 retries)\n            let retries = 0;\n            const maxRetries = 3;\n            \n            while (retries < maxRetries) {\n                try {\n                    const response = await axios.get<ProductListResponse>(`${API_URL}?${queryParams.toString()}`);\n                    console.log(\"Products fetched successfully:\", response.data);\n                    return response.data;\n                } catch (error) {\n                    retries++;\n                    console.error(`Attempt ${retries}/${maxRetries} failed:`, error);\n                    \n                    if (retries >= maxRetries) {\n                        throw error;\n                    }\n                    \n                    // Wait before retrying (exponential backoff)\n                    await new Promise(resolve => setTimeout(resolve, 500 * Math.pow(2, retries)));\n                }\n            }\n            \n            // If we reach here, all retries failed\n            throw new Error(\"Failed to fetch products after multiple attempts\");\n        } catch (error) {\n            console.error('Error fetching products:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Отримати товар за ID\n     */\n    async getProduct(id: number): Promise<Product> {\n        try {\n            const response = await axios.get<Product>(`${API_URL}/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching product ${id}:`, error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Створити новий товар\n     */\n    async createProduct(productData: Partial<Product>): Promise<Product> {\n        try {\n            const response = await axios.post<Product>(API_URL, productData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating product:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Оновити існуючий товар\n     */\n    async updateProduct(id: number, productData: Partial<Product>): Promise<Product> {\n        try {\n            const response = await axios.put<Product>(`${API_URL}/${id}`, productData);\n            return response.data;\n        } catch (error) {\n            console.error(`Error updating product ${id}:`, error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Видалити товар\n     */\n    async deleteProduct(id: number): Promise<{ success: boolean; message: string }> {\n        try {\n            const response = await axios.delete<{ success: boolean; message: string }>(`${API_URL}/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error deleting product ${id}:`, error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Оновити видимість товару\n     */\n    async updateProductVisibility(id: number, isVisible: boolean): Promise<{ success: boolean; message: string; is_visible: boolean }> {\n        try {\n            const response = await axios.patch<{ success: boolean; message: string; is_visible: boolean }>(\n                `${API_URL}/${id}/visibility`, \n                { is_visible: isVisible }\n            );\n            return response.data;\n        } catch (error) {\n            console.error(`Error updating visibility for product ${id}:`, error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Масове оновлення товарів\n     */\n    async bulkUpdateProducts(productIds: number[], updateData: Partial<Product>): Promise<{ success: boolean; message: string; updated_count: number }> {\n        try {\n            const response = await axios.post<{ success: boolean; message: string; updated_count: number }>(\n                `${API_URL}/bulk-update`, \n                {\n                    product_ids: productIds,\n                    update_data: updateData\n                }\n            );\n            return response.data;\n        } catch (error) {\n            console.error('Error bulk updating products:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * Отримати доступні опції для фільтрів\n     */\n    async getFilters(): Promise<ProductFilters> {\n        try {\n            const response = await axios.get<ProductFilters>(`${API_URL}/filters`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching product filters:', error);\n            throw error;\n        }\n    }\n};\n\nexport default productService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}