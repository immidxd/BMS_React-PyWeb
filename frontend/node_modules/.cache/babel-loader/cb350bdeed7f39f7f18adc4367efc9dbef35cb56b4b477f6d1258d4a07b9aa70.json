{"ast":null,"code":"import axios from 'axios';\n\n// Define types for API responses\n\n// API functions\nexport const fetchParsingSources = async () => {\n  const response = await axios.get('/api/parsing/sources');\n  return response.data;\n};\nexport const fetchParsingStyles = async () => {\n  const response = await axios.get('/api/parsing/styles');\n  return response.data;\n};\nexport const startParsing = async request => {\n  const response = await axios.post('/api/parsing/start', request);\n  return response.data;\n};\nexport const stopParsing = async logId => {\n  const response = await axios.post(`/api/parsing/stop/${logId}`);\n  return response.data;\n};\nexport const fetchParsingStatus = async logId => {\n  const response = await axios.get(`/api/parsing/status/${logId}`);\n  return response.data;\n};\nexport const fetchParsingLogs = async (limit = 50) => {\n  const response = await axios.get(`/api/parsing/logs?limit=${limit}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","fetchParsingSources","response","get","data","fetchParsingStyles","startParsing","request","post","stopParsing","logId","fetchParsingStatus","fetchParsingLogs","limit"],"sources":["/Users/i.malashenko/Desktop/project копія/react-fastapi-app/frontend/src/services/parsingService.ts"],"sourcesContent":["import axios from 'axios';\n\n// Define types for API responses\nexport interface ParsingSource {\n  id: number;\n  name: string;\n  url: string;\n  description: string | null;\n  enabled: boolean;\n}\n\nexport interface ParsingStyle {\n  id: number;\n  name: string;\n  description: string | null;\n  include_images: boolean;\n  deep_details: boolean;\n}\n\nexport interface ParsingLog {\n  id: number;\n  source_id: number;\n  start_time: string;\n  end_time: string | null;\n  items_processed: number;\n  items_added: number;\n  items_updated: number;\n  items_failed: number;\n  status: 'in_progress' | 'completed' | 'failed' | 'cancelled';\n  message: string | null;\n  source: ParsingSource;\n}\n\nexport interface ParsingStatus {\n  log_id: number;\n  status: 'in_progress' | 'completed' | 'failed' | 'cancelled' | 'unknown';\n  items_processed: number;\n  items_added: number;\n  items_updated: number;\n  items_failed: number;\n  progress: number;\n  total_items?: number;\n  current_item?: number;\n  message: string | null;\n  start_time: string;\n  end_time: string | null;\n  details?: any;\n}\n\nexport interface ParsingRequest {\n  source_id: number;\n  style_id: number;\n  categories?: string[];\n  request_interval?: number;\n  max_items?: number;\n  custom_options?: Record<string, any>;\n}\n\n// API functions\nexport const fetchParsingSources = async (): Promise<ParsingSource[]> => {\n  const response = await axios.get('/api/parsing/sources');\n  return response.data;\n};\n\nexport const fetchParsingStyles = async (): Promise<ParsingStyle[]> => {\n  const response = await axios.get('/api/parsing/styles');\n  return response.data;\n};\n\nexport const startParsing = async (request: ParsingRequest): Promise<{ log_id: number; status: string; message: string }> => {\n  const response = await axios.post('/api/parsing/start', request);\n  return response.data;\n};\n\nexport const stopParsing = async (logId: number): Promise<{ log_id: number; status: string; message: string }> => {\n  const response = await axios.post(`/api/parsing/stop/${logId}`);\n  return response.data;\n};\n\nexport const fetchParsingStatus = async (logId: number): Promise<ParsingStatus> => {\n  const response = await axios.get(`/api/parsing/status/${logId}`);\n  return response.data;\n};\n\nexport const fetchParsingLogs = async (limit: number = 50): Promise<ParsingLog[]> => {\n  const response = await axios.get(`/api/parsing/logs?limit=${limit}`);\n  return response.data;\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAwDA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAsC;EACvE,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,sBAAsB,CAAC;EACxD,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAqC;EACrE,MAAMH,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,qBAAqB,CAAC;EACvD,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,OAAuB,IAAmE;EAC3H,MAAML,QAAQ,GAAG,MAAMF,KAAK,CAACQ,IAAI,CAAC,oBAAoB,EAAED,OAAO,CAAC;EAChE,OAAOL,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAOC,KAAa,IAAmE;EAChH,MAAMR,QAAQ,GAAG,MAAMF,KAAK,CAACQ,IAAI,CAAC,qBAAqBE,KAAK,EAAE,CAAC;EAC/D,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAG,MAAOD,KAAa,IAA6B;EACjF,MAAMR,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,uBAAuBO,KAAK,EAAE,CAAC;EAChE,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOC,KAAa,GAAG,EAAE,KAA4B;EACnF,MAAMX,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,2BAA2BU,KAAK,EAAE,CAAC;EACpE,OAAOX,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}