{"ast":null,"code":"import React,{createContext,useState,useContext,useMemo,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const FilterPanelContext=/*#__PURE__*/createContext(undefined);export const FilterPanelProvider=_ref=>{let{children}=_ref;const[isOpen,setIsOpen]=useState(false);const openFilterPanel=useCallback(()=>{setIsOpen(true);},[]);const closeFilterPanel=useCallback(()=>{setIsOpen(false);},[]);const toggleFilterPanel=useCallback(()=>{setIsOpen(prev=>!prev);},[]);const value=useMemo(()=>({isFilterPanelOpen:isOpen,openFilterPanel,closeFilterPanel,toggleFilterPanel}),[isOpen,openFilterPanel,closeFilterPanel,toggleFilterPanel]);return/*#__PURE__*/_jsx(FilterPanelContext.Provider,{value:value,children:children});};export const useFilterPanel=()=>{const context=useContext(FilterPanelContext);if(context===undefined){throw new Error('useFilterPanel must be used within a FilterPanelProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useMemo","useCallback","jsx","_jsx","FilterPanelContext","undefined","FilterPanelProvider","_ref","children","isOpen","setIsOpen","openFilterPanel","closeFilterPanel","toggleFilterPanel","prev","value","isFilterPanelOpen","Provider","useFilterPanel","context","Error"],"sources":["/Users/i.malashenko/Desktop/react-fastapi-app/frontend/src/contexts/FilterPanelContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useMemo, useCallback } from 'react';\n\ninterface FilterPanelContextType {\n  isFilterPanelOpen: boolean;\n  openFilterPanel: () => void;\n  closeFilterPanel: () => void;\n  toggleFilterPanel: () => void;\n}\n\nconst FilterPanelContext = createContext<FilterPanelContextType | undefined>(undefined);\n\nexport const FilterPanelProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openFilterPanel = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const closeFilterPanel = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  const toggleFilterPanel = useCallback(() => {\n    setIsOpen(prev => !prev);\n  }, []);\n\n  const value = useMemo(() => ({\n    isFilterPanelOpen: isOpen,\n    openFilterPanel,\n    closeFilterPanel,\n    toggleFilterPanel\n  }), [isOpen, openFilterPanel, closeFilterPanel, toggleFilterPanel]);\n\n  return (\n    <FilterPanelContext.Provider value={value}>\n      {children}\n    </FilterPanelContext.Provider>\n  );\n};\n\nexport const useFilterPanel = (): FilterPanelContextType => {\n  const context = useContext(FilterPanelContext);\n  if (context === undefined) {\n    throw new Error('useFilterPanel must be used within a FilterPanelProvider');\n  }\n  return context;\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,OAAO,CAAEC,WAAW,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBASzF,KAAM,CAAAC,kBAAkB,cAAGP,aAAa,CAAqCQ,SAAS,CAAC,CAEvF,MAAO,MAAM,CAAAC,mBAA4D,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvF,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAE3C,KAAM,CAAAa,eAAe,CAAGV,WAAW,CAAC,IAAM,CACxCS,SAAS,CAAC,IAAI,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,gBAAgB,CAAGX,WAAW,CAAC,IAAM,CACzCS,SAAS,CAAC,KAAK,CAAC,CAClB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,iBAAiB,CAAGZ,WAAW,CAAC,IAAM,CAC1CS,SAAS,CAACI,IAAI,EAAI,CAACA,IAAI,CAAC,CAC1B,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,KAAK,CAAGf,OAAO,CAAC,KAAO,CAC3BgB,iBAAiB,CAAEP,MAAM,CACzBE,eAAe,CACfC,gBAAgB,CAChBC,iBACF,CAAC,CAAC,CAAE,CAACJ,MAAM,CAAEE,eAAe,CAAEC,gBAAgB,CAAEC,iBAAiB,CAAC,CAAC,CAEnE,mBACEV,IAAA,CAACC,kBAAkB,CAACa,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAAP,QAAA,CACvCA,QAAQ,CACkB,CAAC,CAElC,CAAC,CAED,MAAO,MAAM,CAAAU,cAAc,CAAGA,CAAA,GAA8B,CAC1D,KAAM,CAAAC,OAAO,CAAGpB,UAAU,CAACK,kBAAkB,CAAC,CAC9C,GAAIe,OAAO,GAAKd,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAe,KAAK,CAAC,0DAA0D,CAAC,CAC7E,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}