{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// Define the shape of our context\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context with a default value\nconst ThemeContext=/*#__PURE__*/createContext({darkTheme:false,toggleTheme:()=>{}});// Hook for components to use the theme context\nexport const useTheme=()=>useContext(ThemeContext);// Provider component that wraps the app\nexport const ThemeProvider=_ref=>{let{children}=_ref;const[darkTheme,setDarkTheme]=useState(false);// Load theme preference from localStorage on mount\nuseEffect(()=>{const savedTheme=localStorage.getItem('darkTheme');if(savedTheme!==null){setDarkTheme(savedTheme==='true');}},[]);// Toggle the theme\nconst toggleTheme=()=>{const newTheme=!darkTheme;setDarkTheme(newTheme);localStorage.setItem('darkTheme',String(newTheme));// Apply theme to CSS variables\ndocument.documentElement.setAttribute('data-theme',newTheme?'dark':'light');};// Apply the current theme on mount and when it changes\nuseEffect(()=>{document.documentElement.setAttribute('data-theme',darkTheme?'dark':'light');// Also add/remove a class on the body for additional styling options\nif(darkTheme){document.body.classList.add('dark-theme');document.body.classList.remove('light-theme');}else{document.body.classList.add('light-theme');document.body.classList.remove('dark-theme');}},[darkTheme]);return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{darkTheme,toggleTheme},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","darkTheme","toggleTheme","useTheme","ThemeProvider","_ref","children","setDarkTheme","savedTheme","localStorage","getItem","newTheme","setItem","String","document","documentElement","setAttribute","body","classList","add","remove","Provider","value"],"sources":["/Users/i.malashenko/Desktop/project копія/react-fastapi-app/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Define the shape of our context\ninterface ThemeContextType {\n  darkTheme: boolean;\n  toggleTheme: () => void;\n}\n\n// Create the context with a default value\nconst ThemeContext = createContext<ThemeContextType>({\n  darkTheme: false,\n  toggleTheme: () => {},\n});\n\n// Hook for components to use the theme context\nexport const useTheme = () => useContext(ThemeContext);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\n// Provider component that wraps the app\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [darkTheme, setDarkTheme] = useState(false);\n\n  // Load theme preference from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('darkTheme');\n    if (savedTheme !== null) {\n      setDarkTheme(savedTheme === 'true');\n    }\n  }, []);\n\n  // Toggle the theme\n  const toggleTheme = () => {\n    const newTheme = !darkTheme;\n    setDarkTheme(newTheme);\n    localStorage.setItem('darkTheme', String(newTheme));\n    \n    // Apply theme to CSS variables\n    document.documentElement.setAttribute('data-theme', newTheme ? 'dark' : 'light');\n  };\n\n  // Apply the current theme on mount and when it changes\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', darkTheme ? 'dark' : 'light');\n    \n    // Also add/remove a class on the body for additional styling options\n    if (darkTheme) {\n      document.body.classList.add('dark-theme');\n      document.body.classList.remove('light-theme');\n    } else {\n      document.body.classList.add('light-theme');\n      document.body.classList.remove('dark-theme');\n    }\n  }, [darkTheme]);\n\n  return (\n    <ThemeContext.Provider value={{ darkTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAExF;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAMA;AACA,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAmB,CACnDO,SAAS,CAAE,KAAK,CAChBC,WAAW,CAAEA,CAAA,GAAM,CAAC,CACtB,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAMR,UAAU,CAACK,YAAY,CAAC,CAMtD;AACA,MAAO,MAAM,CAAAI,aAAa,CAAGC,IAAA,EAAsC,IAArC,CAAEC,QAA6B,CAAC,CAAAD,IAAA,CAC5D,KAAM,CAACJ,SAAS,CAAEM,YAAY,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAEjD;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACpD,GAAIF,UAAU,GAAK,IAAI,CAAE,CACvBD,YAAY,CAACC,UAAU,GAAK,MAAM,CAAC,CACrC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAN,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAS,QAAQ,CAAG,CAACV,SAAS,CAC3BM,YAAY,CAACI,QAAQ,CAAC,CACtBF,YAAY,CAACG,OAAO,CAAC,WAAW,CAAEC,MAAM,CAACF,QAAQ,CAAC,CAAC,CAEnD;AACAG,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,CAAEL,QAAQ,CAAG,MAAM,CAAG,OAAO,CAAC,CAClF,CAAC,CAED;AACAd,SAAS,CAAC,IAAM,CACdiB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,CAAEf,SAAS,CAAG,MAAM,CAAG,OAAO,CAAC,CAEjF;AACA,GAAIA,SAAS,CAAE,CACba,QAAQ,CAACG,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC,CACzCL,QAAQ,CAACG,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,aAAa,CAAC,CAC/C,CAAC,IAAM,CACLN,QAAQ,CAACG,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC,CAC1CL,QAAQ,CAACG,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,YAAY,CAAC,CAC9C,CACF,CAAC,CAAE,CAACnB,SAAS,CAAC,CAAC,CAEf,mBACEF,IAAA,CAACC,YAAY,CAACqB,QAAQ,EAACC,KAAK,CAAE,CAAErB,SAAS,CAAEC,WAAY,CAAE,CAAAI,QAAA,CACtDA,QAAQ,CACY,CAAC,CAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}