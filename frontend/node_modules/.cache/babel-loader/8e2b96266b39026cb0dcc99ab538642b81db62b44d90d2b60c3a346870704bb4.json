{"ast":null,"code":"import axios from 'axios';\n\n// Type definitions for Order API\n\n// API functions\nexport const fetchOrders = async (page = 1, perPage = 20, filters = {}) => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n\n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.client_id !== undefined) params.append('client_id', filters.client_id.toString());\n  if (filters.date_from) params.append('date_from', filters.date_from);\n  if (filters.date_to) params.append('date_to', filters.date_to);\n  if (filters.month_min !== undefined) params.append('month_min', filters.month_min.toString());\n  if (filters.month_max !== undefined) params.append('month_max', filters.month_max.toString());\n  if (filters.year_min !== undefined) params.append('year_min', filters.year_min.toString());\n  if (filters.year_max !== undefined) params.append('year_max', filters.year_max.toString());\n\n  // Add array filters\n  if (filters.order_status_ids && filters.order_status_ids.length > 0) {\n    filters.order_status_ids.forEach(id => params.append('order_status_ids', id.toString()));\n  }\n  if (filters.payment_status_ids && filters.payment_status_ids.length > 0) {\n    filters.payment_status_ids.forEach(id => params.append('payment_status_ids', id.toString()));\n  }\n  if (filters.delivery_method_ids && filters.delivery_method_ids.length > 0) {\n    filters.delivery_method_ids.forEach(id => params.append('delivery_method_ids', id.toString()));\n  }\n  const response = await axios.get(`/api/orders?${params.toString()}`);\n  return response.data;\n};\nexport const fetchOrder = async id => {\n  const response = await axios.get(`/api/orders/${id}`);\n  return response.data;\n};\nexport const fetchOrderProducts = async id => {\n  const response = await axios.get(`/api/orders/${id}/products`);\n  return response.data;\n};\nexport const createOrder = async order => {\n  const response = await axios.post('/api/orders', order);\n  return response.data;\n};\nexport const updateOrder = async (id, order) => {\n  const response = await axios.put(`/api/orders/${id}`, order);\n  return response.data;\n};\nexport const deleteOrder = async id => {\n  const response = await axios.delete(`/api/orders/${id}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","fetchOrders","page","perPage","filters","params","URLSearchParams","append","toString","search","client_id","undefined","date_from","date_to","month_min","month_max","year_min","year_max","order_status_ids","length","forEach","id","payment_status_ids","delivery_method_ids","response","get","data","fetchOrder","fetchOrderProducts","createOrder","order","post","updateOrder","put","deleteOrder","delete"],"sources":["/Users/i.malashenko/Desktop/project копія/react-fastapi-app/frontend/src/services/orderService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Product } from './productService';\n\n// Type definitions for Order API\nexport interface OrderDetail {\n  id: number;\n  order_id: number;\n  product_id: number;\n  quantity: number;\n  price: number;\n  discount_value: number;\n  notes: string | null;\n}\n\nexport interface Order {\n  id: number;\n  client_id: number;\n  order_date: string;\n  order_status_id: number;\n  payment_status_id: number;\n  delivery_method_id: number;\n  total_amount: number;\n  tracking_number: string | null;\n  notes: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface OrderWithDetails extends Order {\n  client_name: string;\n  order_status_name: string;\n  payment_status_name: string;\n  delivery_method_name: string;\n  order_details: OrderDetail[];\n}\n\nexport interface OrderWithProducts extends Order {\n  products: Product[];\n}\n\nexport interface OrdersResponse {\n  items: OrderWithDetails[];\n  total: number;\n  page: number;\n  per_page: number;\n  pages: number;\n}\n\nexport interface OrderFilters {\n  order_status_ids?: number[];\n  payment_status_ids?: number[];\n  delivery_method_ids?: number[];\n  client_id?: number;\n  date_from?: string;\n  date_to?: string;\n  month_min?: number;\n  month_max?: number;\n  year_min?: number;\n  year_max?: number;\n  search?: string;\n}\n\nexport interface OrderDetailCreate {\n  product_id: number;\n  quantity: number;\n  price: number;\n  discount_value?: number;\n  notes?: string;\n}\n\nexport interface OrderCreate {\n  client_id: number;\n  order_status_id: number;\n  payment_status_id: number;\n  delivery_method_id: number;\n  total_amount?: number;\n  tracking_number?: string;\n  notes?: string;\n  order_details: OrderDetailCreate[];\n}\n\n// API functions\nexport const fetchOrders = async (\n  page: number = 1,\n  perPage: number = 20,\n  filters: OrderFilters = {}\n): Promise<OrdersResponse> => {\n  // Build query parameters\n  const params = new URLSearchParams();\n  params.append('page', page.toString());\n  params.append('per_page', perPage.toString());\n  \n  // Add filters to query parameters\n  if (filters.search) params.append('search', filters.search);\n  if (filters.client_id !== undefined) params.append('client_id', filters.client_id.toString());\n  if (filters.date_from) params.append('date_from', filters.date_from);\n  if (filters.date_to) params.append('date_to', filters.date_to);\n  if (filters.month_min !== undefined) params.append('month_min', filters.month_min.toString());\n  if (filters.month_max !== undefined) params.append('month_max', filters.month_max.toString());\n  if (filters.year_min !== undefined) params.append('year_min', filters.year_min.toString());\n  if (filters.year_max !== undefined) params.append('year_max', filters.year_max.toString());\n  \n  // Add array filters\n  if (filters.order_status_ids && filters.order_status_ids.length > 0) {\n    filters.order_status_ids.forEach(id => params.append('order_status_ids', id.toString()));\n  }\n  \n  if (filters.payment_status_ids && filters.payment_status_ids.length > 0) {\n    filters.payment_status_ids.forEach(id => params.append('payment_status_ids', id.toString()));\n  }\n  \n  if (filters.delivery_method_ids && filters.delivery_method_ids.length > 0) {\n    filters.delivery_method_ids.forEach(id => params.append('delivery_method_ids', id.toString()));\n  }\n  \n  const response = await axios.get(`/api/orders?${params.toString()}`);\n  return response.data;\n};\n\nexport const fetchOrder = async (id: number): Promise<OrderWithDetails> => {\n  const response = await axios.get(`/api/orders/${id}`);\n  return response.data;\n};\n\nexport const fetchOrderProducts = async (id: number): Promise<OrderWithProducts> => {\n  const response = await axios.get(`/api/orders/${id}/products`);\n  return response.data;\n};\n\nexport const createOrder = async (order: OrderCreate): Promise<Order> => {\n  const response = await axios.post('/api/orders', order);\n  return response.data;\n};\n\nexport const updateOrder = async (id: number, order: Partial<OrderCreate>): Promise<Order> => {\n  const response = await axios.put(`/api/orders/${id}`, order);\n  return response.data;\n};\n\nexport const deleteOrder = async (id: number): Promise<{ message: string }> => {\n  const response = await axios.delete(`/api/orders/${id}`);\n  return response.data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}