#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ë'–Ñ–î–ù–ê–ù–ò–ô –ü–ê–†–°–ï–†
–ö–µ—Ä—É—î –≤—Å—ñ–º–∞ –≤–∏–¥–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É —á–µ—Ä–µ–∑ —î–¥–∏–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Dict, Optional, Callable
from enum import Enum
import json

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ backend –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥–µ–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('unified_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ParsingMode(Enum):
    """–†–µ–∂–∏–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É."""
    FULL = "full"  # –ü–æ–≤–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å—å–æ–≥–æ
    INCREMENTAL = "incremental"  # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π (—Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ)
    PRODUCTS_ONLY = "products_only"  # –¢—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏
    ORDERS_ONLY = "orders_only"  # –¢—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    NEW_PRODUCTS = "new_products"  # –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω–æ–∫
    QUICK_UPDATE = "quick_update"  # –®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ)

class ParsingStatus:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∞—Ä—Å–∏–Ω–≥—É."""
    
    def __init__(self, callback: Optional[Callable] = None):
        self.callback = callback
        self.current_task = ""
        self.current_progress = 0
        self.total_progress = 0
        self.is_running = False
        self.start_time = None
        self.errors = []
        
    def update(self, task: str, current: int = 0, total: int = 0):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥—É."""
        self.current_task = task
        self.current_progress = current
        self.total_progress = total
        
        if self.callback:
            self.callback(self.get_status())
    
    def add_error(self, error: str):
        """–î–æ–¥–∞—î –ø–æ–º–∏–ª–∫—É."""
        self.errors.append(error)
        logger.error(error)
    
    def get_status(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å."""
        elapsed_time = None
        if self.start_time:
            elapsed_time = (datetime.now() - self.start_time).total_seconds()
        
        return {
            "task": self.current_task,
            "current": self.current_progress,
            "total": self.total_progress,
            "is_running": self.is_running,
            "elapsed_time": elapsed_time,
            "errors": self.errors
        }
    
    def start(self):
        """–ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É."""
        self.is_running = True
        self.start_time = datetime.now()
        self.errors = []
        self.update("–ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É...")
    
    def finish(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É."""
        self.is_running = False
        elapsed = (datetime.now() - self.start_time).total_seconds() if self.start_time else 0
        self.update(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫")

class UnifiedParser:
    """–û–±'—î–¥–Ω–∞–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö."""
    
    def __init__(self, status_callback: Optional[Callable] = None):
        self.status = ParsingStatus(status_callback)
        self.is_cancelled = False
        
    async def parse(self, mode: ParsingMode, **kwargs):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–∞—Ä—Å–∏–Ω–≥ —É –≤–∏–±—Ä–∞–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ."""
        self.is_cancelled = False
        self.status.start()
        
        try:
            if mode == ParsingMode.FULL:
                await self._parse_full()
            elif mode == ParsingMode.INCREMENTAL:
                await self._parse_incremental(kwargs.get('days', 7))
            elif mode == ParsingMode.PRODUCTS_ONLY:
                await self._parse_products_only()
            elif mode == ParsingMode.ORDERS_ONLY:
                await self._parse_orders_only()
            elif mode == ParsingMode.NEW_PRODUCTS:
                await self._parse_new_products()
            elif mode == ParsingMode.QUICK_UPDATE:
                await self._parse_quick_update()
            else:
                raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É: {mode}")
                
        except asyncio.CancelledError:
            self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            logger.info("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            self.status.add_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}", exc_info=True)
            raise
        finally:
            self.status.finish()
    
    def cancel(self):
        """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥."""
        self.is_cancelled = True
        self.status.update("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É...")
    
    async def _check_cancelled(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –Ω–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥."""
        if self.is_cancelled:
            raise asyncio.CancelledError()
    
    async def _parse_full(self):
        """–ü–æ–≤–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö."""
        logger.info("üöÄ –ü–û–í–ù–ò–ô –ü–ê–†–°–ò–ù–ì")
        
        # –ö—Ä–æ–∫ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤...", 0, 2)
        await self._run_products_parser()
        await self._check_cancelled()
        
        # –ö—Ä–æ–∫ 2: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω—å
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω—å...", 1, 2)
        await self._run_orders_parser(force_reparse=True)
        await self._check_cancelled()
        
        self.status.update("–ü–æ–≤–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 2, 2)
    
    async def _parse_incremental(self, days: int):
        """–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤."""
        logger.info(f"üîÑ –Ü–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–ò–ô –ü–ê–†–°–ò–ù–ì (–æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤)")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
        from incremental_parser import IncrementalParser
        
        self.status.update(f"–ü–æ—à—É–∫ –∑–º—ñ–Ω –∑–∞ {days} –¥–Ω—ñ–≤...", 0, 1)
        
        parser = IncrementalParser()
        
        # –ü–µ—Ä–µ–¥–∞—î–º–æ callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        original_parse_sheet = parser.parser.parse_orders_sheet
        
        def wrapped_parse_sheet(worksheet, *args, **kwargs):
            self.status.update(f"–ê—Ä–∫—É—à: {worksheet.title}", 
                             parser.parser.stats.get('processed_sheets', 0),
                             parser.parser.stats.get('total_sheets', 0))
            return original_parse_sheet(worksheet, *args, **kwargs)
        
        parser.parser.parse_orders_sheet = wrapped_parse_sheet
        
        await parser.parse_recent_sheets(days=days)
        
        self.status.update("–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 1, 1)
    
    async def _parse_products_only(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤."""
        logger.info("üì¶ –ü–ê–†–°–ò–ù–ì –¢–û–í–ê–†–Ü–í")
        
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤...", 0, 1)
        await self._run_products_parser()
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 1, 1)
    
    async def _parse_orders_only(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å."""
        logger.info("üõí –ü–ê–†–°–ò–ù–ì –ó–ê–ú–û–í–õ–ï–ù–¨")
        
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω—å...", 0, 1)
        await self._run_orders_parser()
        self.status.update("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 1, 1)
    
    async def _parse_new_products(self):
        """–ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."""
        logger.info("üÜï –ü–û–®–£–ö –ù–û–í–ò–ù–û–ö")
        
        self.status.update("–ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...", 0, 1)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω–æ–∫
        process = await asyncio.create_subprocess_exec(
            sys.executable, 'googlesheets_pars.py', '--new-only',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # –ß–∏—Ç–∞—î–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            
            line_text = line.decode('utf-8').strip()
            if '–û–±—Ä–æ–±–∫–∞ –∞—Ä–∫—É—à–∞' in line_text:
                self.status.update(line_text)
            
            await self._check_cancelled()
            if self.is_cancelled:
                process.terminate()
                await process.wait()
                return
        
        await process.wait()
        
        if process.returncode != 0:
            stderr = await process.stderr.read()
            self.status.add_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω–æ–∫: {stderr.decode('utf-8')}")
        
        self.status.update("–ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 1, 1)
    
    async def _parse_quick_update(self):
        """–®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ."""
        logger.info("‚ö° –®–í–ò–î–ö–ï –û–ù–û–í–õ–ï–ù–ù–Ø")
        
        # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ 3 –¥–Ω—ñ
        await self._parse_incremental(3)
    
    async def _run_products_parser(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä—ñ–≤."""
        process = await asyncio.create_subprocess_exec(
            sys.executable, 'googlesheets_pars.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # –ß–∏—Ç–∞—î–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        sheet_count = 0
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            
            line_text = line.decode('utf-8').strip()
            if '–û–±—Ä–æ–±–∫–∞ –∞—Ä–∫—É—à–∞' in line_text:
                sheet_count += 1
                self.status.update(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤: –∞—Ä–∫—É—à {sheet_count}", sheet_count, 0)
            elif '–∑' in line_text and '–∞—Ä–∫—É—à—ñ–≤' in line_text:
                # –í–∏—Ç—è–≥—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–∫—É—à—ñ–≤
                try:
                    parts = line_text.split()
                    for i, part in enumerate(parts):
                        if part == '–∑' and i + 1 < len(parts):
                            total = int(parts[i + 1])
                            self.status.update(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤: –∞—Ä–∫—É—à {sheet_count}", sheet_count, total)
                except:
                    pass
            
            await self._check_cancelled()
            if self.is_cancelled:
                process.terminate()
                await process.wait()
                return
        
        await process.wait()
        
        if process.returncode != 0:
            stderr = await process.stderr.read()
            self.status.add_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–≤–∞—Ä—ñ–≤: {stderr.decode('utf-8')}")
    
    async def _run_orders_parser(self, force_reparse: bool = False):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–∞—Ä—Å–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω—å."""
        cmd = [sys.executable, 'orders_comprehensive_parser.py']
        if force_reparse:
            cmd.append('--force-reparse')
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # –ß–∏—Ç–∞—î–º–æ –≤–∏–≤—ñ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            
            line_text = line.decode('utf-8').strip()
            if '–û–±—Ä–æ–±–ª—è—î–º–æ –∞—Ä–∫—É—à' in line_text:
                self.status.update(line_text)
            elif '–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–∫—É—à–∞:' in line_text:
                self.status.update(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {line_text}")
            
            await self._check_cancelled()
            if self.is_cancelled:
                process.terminate()
                await process.wait()
                return
        
        await process.wait()
        
        if process.returncode != 0:
            stderr = await process.stderr.read()
            self.status.add_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞–º–æ–≤–ª–µ–Ω—å: {stderr.decode('utf-8')}")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ FastAPI
def get_parsing_modes():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É."""
    return [
        {
            "id": ParsingMode.FULL.value,
            "name": "–ü–æ–≤–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥",
            "description": "–ü–æ–≤–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å",
            "icon": "üîÑ",
            "estimated_time": "1-2 –≥–æ–¥–∏–Ω–∏"
        },
        {
            "id": ParsingMode.INCREMENTAL.value,
            "name": "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω",
            "description": "–ü–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏—Ö —Ç–∞ –∑–º—ñ–Ω–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
            "icon": "üìà",
            "estimated_time": "5-15 —Ö–≤–∏–ª–∏–Ω",
            "params": {
                "days": {
                    "type": "number",
                    "default": 7,
                    "min": 1,
                    "max": 30,
                    "description": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                }
            }
        },
        {
            "id": ParsingMode.QUICK_UPDATE.value,
            "name": "–®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
            "description": "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ",
            "icon": "‚ö°",
            "estimated_time": "2-5 —Ö–≤–∏–ª–∏–Ω"
        },
        {
            "id": ParsingMode.PRODUCTS_ONLY.value,
            "name": "–¢—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏",
            "description": "–ü–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤",
            "icon": "üì¶",
            "estimated_time": "30-60 —Ö–≤–∏–ª–∏–Ω"
        },
        {
            "id": ParsingMode.ORDERS_ONLY.value,
            "name": "–¢—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            "description": "–ü–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç—ñ–≤",
            "icon": "üõí",
            "estimated_time": "30-60 —Ö–≤–∏–ª–∏–Ω"
        },
        {
            "id": ParsingMode.NEW_PRODUCTS.value,
            "name": "–ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω–æ–∫",
            "description": "–ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ",
            "icon": "üÜï",
            "estimated_time": "15-30 —Ö–≤–∏–ª–∏–Ω"
        }
    ]

async def test_parser():
    """–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    def status_callback(status):
        print(f"–°—Ç–∞—Ç—É—Å: {status['task']} ({status['current']}/{status['total']})")
    
    parser = UnifiedParser(status_callback)
    
    # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await parser.parse(ParsingMode.QUICK_UPDATE)

if __name__ == "__main__":
    asyncio.run(test_parser()) 