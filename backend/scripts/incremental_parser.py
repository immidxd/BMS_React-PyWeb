#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–Ü–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–ò–ô –ü–ê–†–°–ï–† –ó–ê–ú–û–í–õ–ï–ù–¨
–®–≤–∏–¥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏—Ö –∞–±–æ –∑–º—ñ–Ω–µ–Ω–∏—Ö –∞—Ä–∫—É—à—ñ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from orders_comprehensive_parser import OrdersComprehensiveParser

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('incremental_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IncrementalParser:
    """–ö–ª–∞—Å –¥–ª—è —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É."""
    
    def __init__(self):
        self.parser = OrdersComprehensiveParser(use_cache=True, force_reparse=False)
    
    async def parse_recent_sheets(self, days: int = 7):
        """–ü–∞—Ä—Å–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –∞—Ä–∫—É—à—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤."""
        logger.info(f"üöÄ –Ü–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–ò–ô –ü–ê–†–°–ò–ù–ì (–æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤)")
        logger.info("=" * 50)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        from orders_comprehensive_parser import SessionLocal, ClientManager, ProductPriceManager, ProductCache, OrderDeduplicator
        self.parser.session = SessionLocal()
        self.parser.client_manager = ClientManager(self.parser.session)
        self.parser.price_manager = ProductPriceManager(self.parser.session)
        self.parser.product_cache = ProductCache(self.parser.session)
        self.parser.order_deduplicator = OrderDeduplicator(self.parser.session)
        
        try:
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
            client = self.parser.get_google_sheet_client()
            if not client:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets")
            
            from orders_comprehensive_parser import ORDERS_DOCUMENT_NAME
            doc = client.open(ORDERS_DOCUMENT_NAME)
            self.parser.workbook = doc
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ: {doc.title}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–≤—ñ–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ
            order_statuses, payment_statuses, delivery_methods = self.parser.get_or_create_reference_data()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞—Ä–∫—É—à—ñ
            worksheets = doc.worksheets()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞—Ä–∫—É—à—ñ –∑–∞ –¥–∞—Ç–æ—é
            cutoff_date = datetime.now() - timedelta(days=days)
            recent_sheets = []
            
            for ws in worksheets:
                if any(char.isdigit() for char in ws.title) and '.' in ws.title:
                    try:
                        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à–∞
                        date_parts = ws.title.split('.')
                        if len(date_parts) == 3:
                            day, month, year = map(int, date_parts)
                            sheet_date = datetime(year, month, day)
                            
                            if sheet_date >= cutoff_date:
                                recent_sheets.append((ws, sheet_date))
                    except:
                        continue
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            recent_sheets.sort(key=lambda x: x[1], reverse=True)
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(recent_sheets)} –∞—Ä–∫—É—à—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –∞—Ä–∫—É—à—ñ
            for i, (worksheet, sheet_date) in enumerate(recent_sheets, 1):
                logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–∫—É—à {i}/{len(recent_sheets)}: {worksheet.title}")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞—Ä–∫—É—à–∞
                try:
                    all_data = self.parser.parse_sheet(worksheet.title)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –∞—Ä–∫—É—à
                    if not self.parser.cache_manager.is_sheet_changed(worksheet.title, all_data):
                        logger.info(f"–ê—Ä–∫—É—à '{worksheet.title}' –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                        self.parser.stats['skipped_sheets'] += 1
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–∫—É—à
                    self.parser.parse_orders_sheet(worksheet, order_statuses, payment_statuses, delivery_methods)
                    
                    # –ö–æ–º—ñ—Ç–∏–º–æ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ –¥–ª—è —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
                    self.parser.session.commit()
                    logger.info(f"‚úÖ –ê—Ä–∫—É—à '{worksheet.title}' –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—Ä–∫—É—à–∞ {worksheet.title}: {e}")
                    try:
                        self.parser.session.rollback()
                    except:
                        pass
                    continue
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
            if self.parser.price_manager.price_updates or self.parser.price_manager.size_updates or self.parser.price_manager.measurement_updates:
                logger.info("–ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...")
                self.parser.price_manager.apply_all_updates(self.parser.product_cache)
                self.parser.session.commit()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à—ñ
            self.parser.cache_manager.save_all_caches()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info("\n" + "=" * 50)
            logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –Ü–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–£:")
            logger.info(f"  –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {self.parser.stats['total_orders']}")
            logger.info(f"  –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {self.parser.stats['successful_orders']}")
            logger.info(f"  –ü–æ–º–∏–ª–æ–∫: {self.parser.stats['errors']}")
            logger.info(f"  –ê—Ä–∫—É—à—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {self.parser.stats['processed_sheets']}")
            logger.info(f"  –ê—Ä–∫—É—à—ñ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {self.parser.stats['skipped_sheets']}")
            logger.info(f"  –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {self.parser.stats['skipped_duplicates']}")
            logger.info(f"  –ö–ª—ñ—î–Ω—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {self.parser.client_manager.stats['created']}")
            logger.info(f"  –ö–ª—ñ—î–Ω—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {self.parser.client_manager.stats['updated']}")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
            try:
                self.parser.session.rollback()
            except:
                pass
            raise
        finally:
            if self.parser.session:
                self.parser.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω—å')
    parser.add_argument('--days', type=int, default=7, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 7)')
    args = parser.parse_args()
    
    incremental_parser = IncrementalParser()
    await incremental_parser.parse_recent_sheets(days=args.days)

if __name__ == "__main__":
    asyncio.run(main()) 