#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–¢–ò–õ–Ü–¢–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–ï–®–ï–ú –ü–ê–†–°–ï–†–ê
–î–æ–∑–≤–æ–ª—è—î –æ—á–∏—â–∞—Ç–∏, –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∫–µ—à
"""

import os
import pickle
import shutil
import argparse
from datetime import datetime, timedelta
from typing import Dict, Any

# –®–ª—è—Ö–∏ –¥–æ –∫–µ—à—É
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
CACHE_DIR = os.path.join(SCRIPT_DIR, "cache")
SHEETS_CACHE_FILE = os.path.join(CACHE_DIR, "sheets_cache.pkl")
ORDERS_HASH_FILE = os.path.join(CACHE_DIR, "orders_hashes.pkl")
PRODUCTS_CACHE_FILE = os.path.join(CACHE_DIR, "products_cache.pkl")

class CacheUtility:
    """–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–µ—à–µ–º."""
    
    def __init__(self):
        self.cache_files = {
            'sheets': SHEETS_CACHE_FILE,
            'orders': ORDERS_HASH_FILE,
            'products': PRODUCTS_CACHE_FILE
        }
    
    def load_cache(self, file_path: str) -> Any:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–µ—à –∑ —Ñ–∞–π–ª—É."""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    return pickle.load(f)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É {file_path}: {e}")
        return None
    
    def get_file_size(self, file_path: str) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."""
        if not os.path.exists(file_path):
            return "0 B"
        
        size = os.path.getsize(file_path)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
    
    def analyze_cache(self):
        """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç–∞–Ω –∫–µ—à—É."""
        print("üìä –ê–ù–ê–õ–Ü–ó –ö–ï–®–£ –ü–ê–†–°–ï–†–ê")
        print("=" * 50)
        
        if not os.path.exists(CACHE_DIR):
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∫–µ—à—É –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        total_size = 0
        
        for cache_name, file_path in self.cache_files.items():
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                total_size += size
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–º—ñ—Å—Ç
                cache_data = self.load_cache(file_path)
                
                print(f"\nüóÇÔ∏è  {cache_name.upper()} CACHE:")
                print(f"   –§–∞–π–ª: {os.path.basename(file_path)}")
                print(f"   –†–æ–∑–º—ñ—Ä: {self.get_file_size(file_path)}")
                print(f"   –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ: {datetime.fromtimestamp(os.path.getmtime(file_path))}")
                
                if cache_data is not None:
                    if isinstance(cache_data, dict):
                        print(f"   –ó–∞–ø–∏—Å—ñ–≤: {len(cache_data)}")
                        if cache_name == 'sheets':
                            # –ê–Ω–∞–ª—ñ–∑ –∫–µ—à—É –∞—Ä–∫—É—à—ñ–≤
                            recent_sheets = 0
                            old_sheets = 0
                            cutoff = datetime.now() - timedelta(days=30)
                            
                            for sheet_name in cache_data.keys():
                                try:
                                    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à–∞
                                    date_parts = sheet_name.split('.')
                                    if len(date_parts) == 3:
                                        day, month, year = map(int, date_parts)
                                        sheet_date = datetime(year, month, day)
                                        if sheet_date >= cutoff:
                                            recent_sheets += 1
                                        else:
                                            old_sheets += 1
                                except:
                                    pass
                            
                            print(f"   –ù–æ–≤—ñ –∞—Ä–∫—É—à—ñ (< 30 –¥–Ω—ñ–≤): {recent_sheets}")
                            print(f"   –°—Ç–∞—Ä—ñ –∞—Ä–∫—É—à—ñ (> 30 –¥–Ω—ñ–≤): {old_sheets}")
                    
                    elif isinstance(cache_data, set):
                        print(f"   –ó–∞–ø–∏—Å—ñ–≤: {len(cache_data)}")
                    
                    else:
                        print(f"   –¢–∏–ø –¥–∞–Ω–∏—Ö: {type(cache_data)}")
            else:
                print(f"\n‚ùå {cache_name.upper()} CACHE: —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î")
        
        print(f"\nüì¶ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–û–ó–ú–Ü–† –ö–ï–®–£: {self.get_file_size_bytes(total_size)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        if total_size > 100 * 1024 * 1024:  # > 100MB
            print("   - –ö–µ—à –¥–æ—Å–∏—Ç—å –≤–µ–ª–∏–∫–∏–π, —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        
        sheets_cache = self.load_cache(SHEETS_CACHE_FILE)
        if sheets_cache and len(sheets_cache) > 200:
            print("   - –ë–∞–≥–∞—Ç–æ –∑–∞–∫–µ—à–æ–≤–∞–Ω–∏—Ö –∞—Ä–∫—É—à—ñ–≤, –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ")
        
        orders_cache = self.load_cache(ORDERS_HASH_FILE)
        if orders_cache and len(orders_cache) > 50000:
            print("   - –ë–∞–≥–∞—Ç–æ —Ö–µ—à—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å, –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ")
    
    def get_file_size_bytes(self, size_bytes: int) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –±–∞–π—Ç–∏ —É –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç."""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    def clear_cache(self, cache_type: str = 'all'):
        """–û—á–∏—â–∞—î –∫–µ—à."""
        print(f"üßπ –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£: {cache_type.upper()}")
        
        if cache_type == 'all':
            if os.path.exists(CACHE_DIR):
                shutil.rmtree(CACHE_DIR)
                print("‚úÖ –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω–æ")
            os.makedirs(CACHE_DIR, exist_ok=True)
        
        elif cache_type in self.cache_files:
            file_path = self.cache_files[cache_type]
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"‚úÖ –ö–µ—à {cache_type} –æ—á–∏—â–µ–Ω–æ")
            else:
                print(f"‚ùå –§–∞–π–ª –∫–µ—à—É {cache_type} –Ω–µ —ñ—Å–Ω—É—î")
        
        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–µ—à—É: {cache_type}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏: {', '.join(self.cache_files.keys())}, all")
    
    def optimize_cache(self):
        """–û–ø—Ç–∏–º—ñ–∑—É—î –∫–µ—à, –≤–∏–¥–∞–ª—è—é—á–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏."""
        print("‚ö° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –ö–ï–®–£")
        print("=" * 30)
        
        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –∞—Ä–∫—É—à—ñ–≤ - –≤–∏–¥–∞–ª—è—î–º–æ –∞—Ä–∫—É—à—ñ —Å—Ç–∞—Ä—à–µ 60 –¥–Ω—ñ–≤
        sheets_cache = self.load_cache(SHEETS_CACHE_FILE)
        if sheets_cache:
            cutoff = datetime.now() - timedelta(days=60)
            original_count = len(sheets_cache)
            optimized_cache = {}
            
            for sheet_name, hash_value in sheets_cache.items():
                try:
                    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à–∞
                    date_parts = sheet_name.split('.')
                    if len(date_parts) == 3:
                        day, month, year = map(int, date_parts)
                        sheet_date = datetime(year, month, day)
                        if sheet_date >= cutoff:
                            optimized_cache[sheet_name] = hash_value
                    else:
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä–∫—É—à—ñ –±–µ–∑ –¥–∞—Ç–∏
                        optimized_cache[sheet_name] = hash_value
                except:
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä–∫—É—à—ñ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏
                    optimized_cache[sheet_name] = hash_value
            
            if len(optimized_cache) < original_count:
                with open(SHEETS_CACHE_FILE, 'wb') as f:
                    pickle.dump(optimized_cache, f)
                removed = original_count - len(optimized_cache)
                print(f"üìÑ –ö–µ—à –∞—Ä–∫—É—à—ñ–≤: –≤–∏–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
            else:
                print("üìÑ –ö–µ—à –∞—Ä–∫—É—à—ñ–≤: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        
        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –∑–∞–º–æ–≤–ª–µ–Ω—å - –æ–±–º–µ–∂—É—î–º–æ –¥–æ 30000 –∑–∞–ø–∏—Å—ñ–≤
        orders_cache = self.load_cache(ORDERS_HASH_FILE)
        if orders_cache and len(orders_cache) > 30000:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ set –≤ list, –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 30000
            orders_list = list(orders_cache)
            optimized_orders = set(orders_list[-30000:])
            
            with open(ORDERS_HASH_FILE, 'wb') as f:
                pickle.dump(optimized_orders, f)
            
            removed = len(orders_cache) - len(optimized_orders)
            print(f"üõí –ö–µ—à –∑–∞–º–æ–≤–ª–µ–Ω—å: –≤–∏–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        else:
            print("üõí –ö–µ—à –∑–∞–º–æ–≤–ª–µ–Ω—å: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        
        print("‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def backup_cache(self, backup_dir: str):
        """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –∫–µ—à—É."""
        print(f"üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–û–á –ö–û–ü–Ü–á: {backup_dir}")
        
        if not os.path.exists(CACHE_DIR):
            print("‚ùå –ö–µ—à –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        os.makedirs(backup_dir, exist_ok=True)
        
        for cache_name, file_path in self.cache_files.items():
            if os.path.exists(file_path):
                backup_file = os.path.join(backup_dir, os.path.basename(file_path))
                shutil.copy2(file_path, backup_file)
                print(f"‚úÖ {cache_name} -> {backup_file}")
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    
    def restore_cache(self, backup_dir: str):
        """–í—ñ–¥–Ω–æ–≤–ª—é—î –∫–µ—à –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó."""
        print(f"üì• –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ó –†–ï–ó–ï–†–í–ù–û–á –ö–û–ü–Ü–á: {backup_dir}")
        
        if not os.path.exists(backup_dir):
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        os.makedirs(CACHE_DIR, exist_ok=True)
        
        for cache_name, file_path in self.cache_files.items():
            backup_file = os.path.join(backup_dir, os.path.basename(file_path))
            if os.path.exists(backup_file):
                shutil.copy2(backup_file, file_path)
                print(f"‚úÖ {backup_file} -> {cache_name}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {cache_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ñ–π –∫–æ–ø—ñ—ó")
        
        print("‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    parser = argparse.ArgumentParser(description='–£—Ç–∏–ª—ñ—Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–µ—à–µ–º –ø–∞—Ä—Å–µ—Ä–∞')
    parser.add_argument('action', choices=['analyze', 'clear', 'optimize', 'backup', 'restore'], 
                       help='–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')
    parser.add_argument('--type', choices=['sheets', 'orders', 'products', 'all'], default='all',
                       help='–¢–∏–ø –∫–µ—à—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è')
    parser.add_argument('--backup-dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó')
    
    args = parser.parse_args()
    
    cache_util = CacheUtility()
    
    if args.action == 'analyze':
        cache_util.analyze_cache()
    
    elif args.action == 'clear':
        cache_util.clear_cache(args.type)
    
    elif args.action == 'optimize':
        cache_util.optimize_cache()
    
    elif args.action == 'backup':
        if not args.backup_dir:
            print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --backup-dir")
            return
        cache_util.backup_cache(args.backup_dir)
    
    elif args.action == 'restore':
        if not args.backup_dir:
            print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --backup-dir")
            return
        cache_util.restore_cache(args.backup_dir)

if __name__ == "__main__":
    main() 