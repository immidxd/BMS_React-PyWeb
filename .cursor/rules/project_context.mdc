---
description: 
globs: 
alwaysApply: true
---
# Контекст проекту BMS_React+PyWeb

1. **Загальна концепція проекту**

- Ми створюємо та модернізуємо, щоб довести до бажаного ідеалу програму-систему керування моїм взуттєвим бізнесом, котрий повязаний з базою данних postgress. Програма має бути зручною, зрозумілою, красивою, в повній мірі виконувати ті функції, які потребує власник (я).  
- Проект представляє собою систему керування бізнесом, спеціалізовану для роботи з товарами, замовленнями, клієнтами, поставками, постачальниками та статистикою. Це комплексна система, розроблена на Python з використанням PostgreSQL як бази даних. Основні компоненти системи включають:

Керування товарами (Products):

Зберігання детальної інформації про товари, включаючи номери, бренди, типи, розміри, ціни
Підтримка клонованих номерів товарів, що дозволяє відстежувати альтернативні номери
Відстеження статусу продажу (продано/не продано)
Класифікація товарів за типами, підтипами, брендами, статтю, кольорами тощо


Керування замовленнями (Orders):

Створення та відстеження замовлень клієнтів
Зв'язок замовлень з продуктами через таблицю деталей замовлення
Підтримка різних статусів замовлення та статусів оплати
Трекінг доставки з методами доставки та трек-номерами


Керування клієнтами (Clients):

Зберігання інформації про клієнтів, включаючи контактну інформацію
Відстеження історії замовлень та купівельної поведінки клієнтів
Підтримка зв'язків між клієнтами через таблицю connections
Категоризація клієнтів за типами та статусами


Інтеграція з Google Sheets:

Імпорт даних з Google Sheets для оновлення бази даних
Синхронізація замовлень та товарів з таблицями Google
Асинхронна обробка для ефективної роботи з великими обсягами даних


Аналітика та моніторинг:

Відстеження активності по транслюванню товарів (broadcasts)
Збір статистики по замовленнях та продажах
Логування операцій імпорту та обробки даних


Система особливо націлена на обробку та трекінг товарів, де кожен товар має унікальний номер (productnumber), а також може мати клоновані чи дубльовані номери. Вона також підтримує складні бізнес-процеси, включаючи різні типи доставки, статуси замовлень, та методи оплати.
Особлива увага приділена імпорту даних з Google Sheets, де спеціальні скрипти (googlesheets_pars.py і orders_pars.py) відповідають за синхронізацію даних між вашими таблицями Google і базою даних PostgreSQL. Цей процес включає складну логіку для обробки дублікатів, оновлення існуючих записів та створення нових при необхідності.
Проект також підтримує асинхронний режим роботи для ефективної обробки даних без блокування інтерфейсу користувача, що особливо важливо при роботі з великими обсягами даних.

2. **Мова**

 - Весь інтерфейст українською мовою
 - Коментарі в коді українською мовою
 - Документація українською 

3. **Технічний стек**
- Мова програмування (Backend): Python
- Веб-фреймворк (Backend): FastAPI (використовується uvicorn для запуску)
- Мова програмування (Frontend): JavaScript React
- Бібліотека для десктопної обгортки: PyWebView
- База даних: PostgreSQL (використовується як SQLAlchemy ORM, так і пряме підключення через psycopg2)
- ORM: SQLAlchemy
- Взаємодія з Google Sheets: Бібліотеки gspread та oauth2client

4. **Структура проекту**

.  # Корінь проекту
├── .cursor/                     # Папка конфігурації та кешу редактора Cursor
├── .git/                        # Папка системи контролю версій Git
├── __pycache__/                 # Кеш Python байт-коду (може бути в .gitignore)
├── backend/                     # Основна папка бекенд-додатку (FastAPI)
│   ├── __pycache__/             # Кеш Python для бекенду
│   ├── app/                     # Головна частина FastAPI додатку
│   │   ├── __pycache__/         # Кеш Python для app
│   │   ├── main.py              # Точка входу FastAPI, конфігурація, CORS, роутери
│   │   ├── app.log              # Файл логів бекенд-додатку
│   │   └── __init__.py          # Позначає папку app як Python пакет
│   ├── migrations/              # Скрипти для міграції бази даних
│   │   ├── __pycache__/         # Кеш Python для migrations
│   │   ├── update_products_table.py # Ймовірно, скрипт для оновлення схеми таблиці продуктів
│   │   ├── run_migrations.py    # Скрипт для запуску процесу міграцій
│   │   ├── seed_test_data.py    # Скрипт для заповнення БД тестовими даними (ймовірно, застарілий)
│   │   └── seed_reference_data.py # Скрипт для заповнення БД довідковими даними (ймовірно, застарілий)
│   ├── models/                  # Модулі, пов'язані з базою даних
│   │   ├── __pycache__/         # Кеш Python для models
│   │   ├── seed_data.py         # Функції для початкового заповнення БД (довідники, можливо тестові дані)
│   │   ├── models.py            # Визначення моделей SQLAlchemy (структури таблиць БД)
│   │   ├── database.py          # Налаштування підключення до БД, створення сесій SQLAlchemy
│   │   └── __init__.py          # Позначає папку models як Python пакет
│   ├── parsers/                 # Модулі для парсингу даних (поки що порожньо)
│   │   └── __init__.py          # Позначає папку parsers як Python пакет
│   ├── routers/                 # Обробники API ендпоінтів (маршрутизація)
│   │   ├── __pycache__/         # Кеш Python для routers
│   │   ├── parsing.py           # Ендпоінти для управління процесом парсингу
│   │   ├── orders.py            # Ендпоінти для роботи з замовленнями (CRUD)
│   │   ├── products.py          # Ендпоінти для роботи з продуктами (CRUD)
│   │   ├── delivery_methods.py  # Ендпоінти для роботи з методами доставки
│   │   ├── order_statuses.py    # Ендпоінти для роботи зі статусами замовлень
│   │   ├── payment_statuses.py  # Ендпоінти для роботи зі статусами оплати
│   │   ├── clients.py           # Ендпоінти для роботи з клієнтами
│   │   └── __init__.py          # Позначає папку routers як Python пакет
│   ├── schemas/                 # Схеми Pydantic для валідації даних API (запити/відповіді)
│   │   ├── __pycache__/         # Кеш Python для schemas
│   │   ├── order.py             # Схеми Pydantic для замовлень
│   │   ├── product.py           # Схеми Pydantic для продуктів
│   │   ├── __init__.py          # Позначає папку schemas як Python пакет
│   │   ├── reference.py         # Схеми Pydantic для довідкових даних (статуси, методи доставки тощо)
│   │   └── parsing.py           # Схеми Pydantic для даних, пов'язаних з парсингом
│   ├── scripts/                 # Допоміжні скрипти
│   │   ├── orders_pars.py       # Основний скрипт парсингу замовлень з Google Sheets (має запускатись автоматично після парсингу товару)
│   │   ├── sheets_parsing_issues.log # Лог проблем, виявлених під час парсингу
│   │   ├── secure_creds/        # **Дуже важливо:** Папка для зберігання файлу облікових даних Google API (не повинна бути в Git)
│   │   └── googlesheets_pars.py # Основний скрипт парсингу товару з Google Sheets (після нього має автоматично запускатись orders_pars.py)
│   ├── services/                # Бізнес-логіка додатку (операції з даними)
│   │   ├── __pycache__/         # Кеш Python для services
│   │   ├── order_service.py     # Логіка для роботи з замовленнями
│   │   ├── product_service.py   # Логіка для роботи з продуктами
│   │   ├── parsing_service.py   # Логіка для управління процесом парсингу
│   │   └── __init__.py          # Позначає папку services як Python пакет
│   ├── utils/                   # Допоміжні функції та утиліти
│   │   ├── __init__.py          # Позначає папку utils як Python пакет
│   │   └── database_reset.py    # Скрипт для скидання бази даних
│   ├── __init__.py              # Позначає папку backend як Python пакет
│   └── update_visibility.py     # Ймовірно, скрипт для оновлення видимості продуктів
├── frontend/                    # Основна папка фронтенд-додатку (React)
│   ├── build/                   # Папка зі збіркою фронтенду для продакшену
│   ├── node_modules/            # Залежності Node.js проекту
│   ├── public/                  # Статичні файли, доступні напряму
│   │   ├── images/              # Папка для зображень
│   │   ├── test.html            # Тестовий HTML файл
│   │   ├── index.html           # Головний HTML файл, куди монтується React додаток
│   │   └── manifest.json        # Маніфест веб-додатку (для PWA)
│   ├── react-fastapi-app/       # Ймовірно, папка, що залишилася від попередньої структури або шаблону
│   ├── src/                     # Основний код React додатку
│   │   ├── components/          # Перевикористовувані UI компоненти
│   │   ├── App/                 # Можливо, компоненти, специфічні для основного додатку
│   │   ├── App.css              # Стилі для основного компоненту App
│   │   ├── App.tsx              # Головний компонент React додатку
│   │   ├── pages/               # Компоненти, що представляють окремі сторінки/розділи
│   │   ├── types/               # Визначення типів TypeScript
│   │   ├── index.tsx            # Точка входу React додатку, рендеринг App
│   │   ├── services/            # Функції для взаємодії з API бекенду
│   │   ├── index.css            # Глобальні стилі додатку
│   │   ├── themes.ts            # Налаштування тем оформлення (ймовірно, для UI бібліотеки)
│   │   ├── contexts/            # React Context API для глобального стану
│   │   ├── hooks/               # Кастомні React хуки
│   │   └── utils/               # Допоміжні функції для фронтенду
│   ├── .DS_Store                # Системний файл macOS
│   ├── package-lock.json        # Фіксує версії залежностей Node.js
│   ├── package.json             # Описує проект Node.js, залежності, скрипти
│   └── tsconfig.json            # Конфігурація TypeScript компілятора
├── past_version/                # Папка зі старою версією проекту без React (для довідки)
├── venv/                        # Віртуальне середовище Python
├── .DS_Store                    # Системний файл macOS (в корені)
├── .env                         # Файл зі змінними оточення (паролі, ключі API, налаштування БД)
├── MIGRATION.md                 # Документація процесу міграції (можливо, оновлення структури БД)
├── README.md                    # Основна документація проекту (опис, інструкції з запуску)
├── main.py                      # Головний скрипт запуску всього додатку (Backend + Frontend через PyWebView)
├── models.py                    # **Увага:** Можливо, застарілий файл моделей поза `backend/models`
├── orders_import_logs.log       # Лог останнього запуску скрипта імпорту замовлень
├── requirements.txt             # Список Python залежностей для `pip install`
├── run.bat                      # Скрипт для запуску проекту на Windows
└── run.sh                       # Скрипт для запуску проекту на Linux/macOS